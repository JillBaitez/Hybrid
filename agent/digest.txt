Directory structure:
└── agent/
    ├── esbuild.config.js
    ├── manifest.json
    ├── docs/
    │   ├── events.json
    │   ├── globals-pruned.txt
    │   └── RECON_REPORT.md
    └── src/
        ├── offscreen.html
        ├── sw.ts
        ├── __tests__/
        │   ├── NetRules.test.ts
        │   ├── StateManager.test.ts
        │   ├── sw.test.ts
        │   └── utils.test.ts
        ├── bus/
        │   ├── events.ts
        │   └── os.ts
        ├── net/
        │   └── NetRules.ts
        ├── providers/
        │   └── ProviderRegistry.ts
        ├── state/
        │   ├── state-recovery.ts
        │   └── StateManager.ts
        └── utils/
            └── utils.ts

================================================
FILE: esbuild.config.js
================================================
import { build } from 'esbuild';

const shared = {
  target: 'chrome120',
  format: 'esm',
  bundle: true,
  minify: true,
  sourcemap: false,
  splitting: false,
  treeShaking: true,
  external: [],
};

await Promise.all([
  // Service Worker
  build({
    ...shared,
    entryPoints: ['src/sw.ts'],
    outfile: 'dist/sw.js',
    platform: 'node',
  }),

  // Offscreen Document
  build({
    ...shared,
    entryPoints: ['src/offscreen.html'],
    outdir: 'dist',
    loader: { '.html': 'copy' },
  }),
]);

console.log('âœ… Build complete â€“ dist/ ready for manifest.');



================================================
FILE: manifest.json
================================================
{
  "manifest_version": 3,
  "name": "HTOS Text-First",
  "description": "Secure text-streaming to LLM providers",
  "version": "1.0.0",
  "background": { "service_worker": "dist/sw.js" },
  "permissions": [
    "storage",
    "declarativeNetRequest",
    "cookies",
    "tabs",
    "offscreen"
  ],
  "host_permissions": [
    "https://chat.openai.com/*",
    "https://claude.ai/*",
    "https://gemini.google.com/*"
  ],
  "declarative_net_request": {
    "rule_resources": []
  },
  "content_scripts": []
}



================================================
FILE: docs/events.json
================================================
{
  "bus_events": {
    "privileged": [
      "bus.getTabData",
      "bus.sendToCs", 
      "bus.proxy",
      "bus.removeCsProxies",
      "bus.blobIdToObjectUrl"
    ],
    "public": [
      "automate",
      "chat-ask",
      "command-run", 
      "command-step-added",
      "context-menu-click",
      "error",
      "grab-click",
      "install",
      "note-acknowledged",
      "note-clicked",
      "note-closed",
      "note-shown",
      "pageview"
    ]
  },
  "chrome_apis": [
    "chrome.cookies",
    "chrome.declarativeNetRequest", 
    "chrome.offscreen",
    "chrome.storage",
    "chrome.tabs"
  ],
  "libraries_to_npm": [
    "mobx",
    "jszip",
    "pako",
    "js-yaml",
    "nanoid"
  ],
  "bus_patterns": [
    "bus.send",
    "bus.on",
    "bus.setIframe"
  ],
  "special_patterns": [
    "bus.blob.*",
    "bus.error.*",
    "bus.channel"
  ]
}


================================================
FILE: docs/globals-pruned.txt
================================================
ask
askBody
askChat
_askClaudeSession
_askCloudgpt
askController
asked
_askGeminiSession
asking
_askOpenaiLicense
_askOpenaiSession
chunk
chunkify
chunking
chunks
chunkSize
cursor
done
error
error_
error_code
errorCode
errorDetails
errorDev
errorHandler_
errors
_errorToString
onerror
overloaded_error
provider
_state
state
stateActions
stateController
token
tokenFetchTimeout
tokenizer
tokenPath
tokens
tokenUnits



================================================
FILE: docs/RECON_REPORT.md
================================================
# 90-MINUTE RECON PASS - FINDINGS REPORT

## Executive Summary
- **Original file size**: 2.59MB (docs/bg.cleaned.simplified.js)
- **Bundled size**: 2.47MB (after esbuild processing)
- **Total unique identifiers**: 13,721 (from globals.txt)
- **Snapshot created**: docs/bg.js.snapshot ✅

## Static Inventory Results

### Bundle Analysis
- **Input**: docs/bg.cleaned.simplified.js (2,596,363 bytes)
- **Output**: _tmp/bundle.js (2,467,086 bytes in output)
- **Format**: CommonJS → ESM conversion successful
- **Compression ratio**: ~5% size reduction during bundling

### Chrome APIs Detected
- `chrome.cookies` - Cookie management (privileged)
- `chrome.declarativeNetRequest` - Network request modification (privileged)
- `chrome.offscreen` - Offscreen document management (privileged)
- `chrome.storage` - Extension storage (privileged)
- `chrome.tabs` - Tab management (privileged)

## Message Bus Architecture

### Bus Events (Privileged - require service worker context)
- `bus.getTabData` - Retrieves tab information
- `bus.sendToCs` - Send messages to content scripts
- `bus.proxy` - Proxy communication handling
- `bus.removeCsProxies` - Remove content script proxies
- `bus.blobIdToObjectUrl` - Convert blob IDs to object URLs

### Bus Events (Public - can run in any context)
- `automate` - Automation triggers
- `chat-ask` - Chat/AI interactions
- `command-run` - Command execution
- `command-step-added` - Command step tracking
- `context-menu-click` - Context menu interactions
- `error` - Error reporting
- `grab-click` - UI interaction capture
- `install` - Installation events
- `note-*` - Note management (acknowledged, clicked, closed, shown)
- `pageview` - Analytics/tracking

### Bus Infrastructure
- **Channel**: `BroadcastChannel('bus.channel')`
- **Blob handling**: `bus.blob.*` pattern for file transfers
- **Error handling**: `bus.error.*` pattern for error propagation

## Library Dependencies (Ready for NPM)

### Core Libraries Found
1. **MobX** - State management (multiple versions detected - needs consolidation)
2. **JSZip v3.10.1** - ZIP file handling
3. **Pako** - Compression library (used by JSZip)
4. **js-yaml** - YAML parsing (inferred from patterns)
5. **nanoid** - ID generation (inferred from patterns)

### Library Extraction Status
- ✅ **JSZip**: Clear version identified (v3.10.1), ready for `npm install jszip@3.10.1`
- ✅ **Pako**: Confirmed as JSZip dependency, ready for `npm install pako`
- ⚠️ **MobX**: Multiple versions detected, needs version audit
- 🔍 **js-yaml & nanoid**: Need confirmation of usage patterns

## Controller Patterns Analysis

### Search Results
- **`__app_hrp.data.$*` patterns**: None found (may use different naming)
- **`data.$*` patterns**: None found in expected format
- **Alternative patterns needed**: Manual inspection required for controller identification

### Next Steps for Controller Discovery
1. Search for class definitions and constructor patterns
2. Look for method binding patterns (`this.*Controller`)
3. Examine module export patterns
4. Check for dependency injection patterns

## File Structure Recommendations

Based on findings, suggested module extraction map:
```
docs/bg.cleaned.simplified.js → src/
├── utils/
│   ├── compression.ts (JSZip + Pako)
│   ├── storage.ts (chrome.storage wrapper)
│   └── tabs.ts (chrome.tabs wrapper)
├── bus/
│   ├── sw.ts (service worker bus)
│   ├── os.ts (offscreen document bus)
│   └── contracts/ (event type definitions)
├── state/
│   └── StateManager.ts (MobX integration)
├── net/
│   └── NetRules.ts (chrome.declarativeNetRequest)
└── providers/
    └── ProviderRegistry.ts (chat/AI providers)
```

## Risk Assessment

### High Risk
- **MobX version conflicts**: Multiple versions detected
- **Privilege escalation**: Bus events mix privileged and public contexts
- **Missing controller patterns**: Expected patterns not found

### Medium Risk  
- **Large bundle size**: 2.4MB may hit memory limits
- **Complex message routing**: Bus proxy patterns are intricate

### Low Risk
- **Library extraction**: Clear separation possible for most libraries
- **Chrome API usage**: Well-defined and documented APIs

## Deliverables Status

- ✅ **bg.js.snapshot** - Created
- ✅ **globals.txt** - 7,547 unique identifiers extracted
- ✅ **events.json** - Complete bus contract documented
- ✅ **chrome_apis.txt** - All privileged APIs identified
- ✅ **Bundle analysis** - Size and dependency mapping complete
- ⚠️ **Controller mapping** - Requires manual inspection

## Next Sprint Steps

1. **Day 2-3**: Manual controller discovery and utils extraction
2. **Day 4-5**: State management and command system porting
3. **Day 6-7**: Message bus refactoring (highest complexity)
4. **Day 8+**: Integration and testing

---
**Recon completion time**: ~45 minutes  
**Confidence level**: High for infrastructure, Medium for business logic patterns


================================================
FILE: src/offscreen.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTOS Offscreen Document</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            background: transparent;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        }
        
        #iframe-container {
            display: none; /* Hidden - text-only iframes */
            position: absolute;
            top: -1000px;
            left: -1000px;
            width: 0;
            height: 0;
            overflow: hidden;
        }
        
        .status {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 8px 12px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border-radius: 4px;
            font-size: 12px;
            z-index: 9999;
        }
        
        .status.ready {
            background: rgba(34, 197, 94, 0.8);
        }
        
        .status.error {
            background: rgba(239, 68, 68, 0.8);
        }
    </style>
</head>
<body>
    <div id="iframe-container">
        <!-- Text-only provider iframes will be injected here -->
    </div>
    
    <div id="status" class="status">Initializing...</div>
    
    <script type="module">
        /**
         * Offscreen Document Entry Point
         * Initializes the OffscreenDocument singleton
         */
        
        // Import the OffscreenDocument class
        import { OffscreenDocument } from './os.js';
        
        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', async () => {
            const statusEl = document.getElementById('status');
            
            try {
                statusEl.textContent = 'Creating offscreen document...';
                
                // Create and initialize the offscreen document
                const offscreen = await OffscreenDocument.create();
                
                if (offscreen.isReady) {
                    statusEl.textContent = 'Ready';
                    statusEl.classList.add('ready');
                    
                    // Hide status after 3 seconds
                    setTimeout(() => {
                        statusEl.style.display = 'none';
                    }, 3000);
                } else {
                    throw new Error('Offscreen document not ready');
                }
                
            } catch (error) {
                console.error('Failed to initialize offscreen document:', error);
                statusEl.textContent = `Error: ${error.message}`;
                statusEl.classList.add('error');
            }
        });
        
        // Global error handler
        window.addEventListener('error', (event) => {
            console.error('Offscreen document error:', event.error);
            const statusEl = document.getElementById('status');
            if (statusEl) {
                statusEl.textContent = `Error: ${event.error?.message || 'Unknown error'}`;
                statusEl.classList.add('error');
                statusEl.style.display = 'block';
            }
        });
        
        // Message handler for iframe communication
        window.addEventListener('message', (event) => {
            // Handle messages from provider iframes
            if (event.data?.type === 'TOKEN_RESPONSE') {
                console.log('Token response received from iframe:', event.data.provider);
            } else if (event.data?.type === 'AUTH_COMPLETE') {
                console.log('Authentication complete for iframe:', event.data.provider);
            }
        });
        
        // Debug helpers (available in console)
        window.HTOS_DEBUG = {
            getOffscreen: () => OffscreenDocument.getInstance(),
            getIframes: () => {
                const offscreen = OffscreenDocument.getInstance();
                return Array.from(document.querySelectorAll('iframe')).map(iframe => ({
                    provider: iframe.getAttribute('data-provider'),
                    src: iframe.src,
                    loaded: iframe.contentDocument !== null
                }));
            },
            extractToken: (provider) => {
                const offscreen = OffscreenDocument.getInstance();
                return offscreen.extractToken(provider);
            }
        };
    </script>
</body>
</html>


================================================
FILE: src/sw.ts
================================================
/**
 * DAY 6 - BUS IMPLEMENTATION (SW SIDE)
 * Service Worker side of the message bus
 * - Uses BroadcastChannel('bus.channel') to talk to offscreen doc
 * - Maps 'ask' â†’ ProviderRegistry.ask
 * - Maps 'blobIdToObjectUrl' â†’ chrome.runtime.getURL('_blob/' + id)
 */

import { 
  TextEventType, 
  TextEventPayload, 
  BusMessage, 
  BUS_CONFIG, 
  createBusMessage,
  BusError,
  BusTimeoutError
} from './events';
import { ProviderRegistry } from './ProviderRegistry';
import { stateManager } from './StateManager';
import { netRules } from './NetRules';

// Bus implementation for Service Worker context
export class ServiceWorkerBus {
  private channel: BroadcastChannel;
  private messageHandlers: Map<string, (message: BusMessage) => Promise<void>> = new Map();
  private activeRequests: Map<string, AbortController> = new Map();
  private isInitialized = false;

  constructor() {
    this.channel = new BroadcastChannel(BUS_CONFIG.CHANNEL_NAME);
    this.setupMessageHandlers();
  }

  /**
   * Initialize the service worker bus
   */
  async init(): Promise<void> {
    if (this.isInitialized) {
      console.warn('ServiceWorkerBus: Already initialized');
      return;
    }

    try {
      // Initialize dependencies
      await netRules.init();
      await stateManager.hydrate();

      // Setup message listener
      this.channel.addEventListener('message', this.handleMessage.bind(this));

      this.isInitialized = true;
      console.log('ServiceWorkerBus: Initialized successfully');
    } catch (error) {
      console.error('ServiceWorkerBus: Failed to initialize', error);
      throw error;
    }
  }

  /**
   * Setup message handlers for each event type
   */
  private setupMessageHandlers(): void {
    this.messageHandlers.set('ask', this.handleAsk.bind(this));
    this.messageHandlers.set('blobIdToObjectUrl', this.handleBlobIdToObjectUrl.bind(this));
  }

  /**
   * Handle incoming messages from offscreen document
   */
  private async handleMessage(event: MessageEvent<BusMessage>): Promise<void> {
    const message = event.data;
    
    if (!message || typeof message !== 'object') {
      console.warn('ServiceWorkerBus: Invalid message received', message);
      return;
    }

    const handler = this.messageHandlers.get(message.type);
    if (!handler) {
      console.warn(`ServiceWorkerBus: No handler for message type: ${message.type}`);
      return;
    }

    try {
      await handler(message);
    } catch (error) {
      console.error(`ServiceWorkerBus: Error handling ${message.type}:`, error);
      
      // Send error response
      this.sendMessage('done', {
        id: message.id,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Handle 'ask' events - delegate to ProviderRegistry
   */
  private async handleAsk(message: BusMessage<'ask'>): Promise<void> {
    const { provider, prompt } = message.payload;
    const requestId = message.id;

    // Create abort controller for this request
    const abortController = new AbortController();
    this.activeRequests.set(requestId, abortController);

    try {
      // Validate provider is available
      if (!ProviderRegistry.isProviderAvailable(provider)) {
        throw new BusError(`Provider ${provider} is not available (missing auth token)`);
      }

      // Stream response chunks
      const stream = ProviderRegistry.ask(provider, prompt, true);
      
      for await (const chunk of stream) {
        // Check if request was aborted
        if (abortController.signal.aborted) {
          break;
        }

        // Send chunk to offscreen document
        this.sendMessage('chunk', {
          id: requestId,
          data: chunk
        });
      }

      // Send completion signal
      this.sendMessage('done', {
        id: requestId,
        usage: { provider, prompt_tokens: prompt.length } // Basic usage info
      });

    } catch (error) {
      this.sendMessage('done', {
        id: requestId,
        error: error instanceof Error ? error.message : String(error)
      });
    } finally {
      this.activeRequests.delete(requestId);
    }
  }

  /**
   * Handle 'blobIdToObjectUrl' events - generate blob URLs
   */
  private async handleBlobIdToObjectUrl(message: BusMessage<'blobIdToObjectUrl'>): Promise<void> {
    const { id } = message.payload;
    
    try {
      // Generate object URL for blob
      const objectUrl = chrome.runtime.getURL(BUS_CONFIG.BLOB_URL_PREFIX + id);
      
      // Send response back (reusing the chunk event for URL delivery)
      this.sendMessage('chunk', {
        id: message.id,
        data: objectUrl
      });

      this.sendMessage('done', {
        id: message.id
      });

    } catch (error) {
      this.sendMessage('done', {
        id: message.id,
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }

  /**
   * Send message to offscreen document
   */
  private sendMessage<T extends TextEventType>(
    type: T,
    payload: TextEventPayload<T>
  ): void {
    const message = createBusMessage(type, payload);
    this.channel.postMessage(message);
  }

  /**
   * Broadcast message to all listeners
   */
  public broadcast<T extends TextEventType>(
    type: T,
    payload: TextEventPayload<T>
  ): void {
    this.sendMessage(type, payload);
  }

  /**
   * Cancel active request
   */
  public cancelRequest(requestId: string): boolean {
    const controller = this.activeRequests.get(requestId);
    if (controller) {
      controller.abort();
      this.activeRequests.delete(requestId);
      return true;
    }
    return false;
  }

  /**
   * Get active request count
   */
  public get activeRequestCount(): number {
    return this.activeRequests.size;
  }

  /**
   * Clean up resources
   */
  public destroy(): void {
    // Cancel all active requests
    for (const controller of this.activeRequests.values()) {
      controller.abort();
    }
    this.activeRequests.clear();

    // Close broadcast channel
    this.channel.close();
    
    this.isInitialized = false;
    console.log('ServiceWorkerBus: Destroyed');
  }

  /**
   * Health check
   */
  public get isHealthy(): boolean {
    return this.isInitialized && this.channel;
  }
}

// Service Worker Bus Test Helper
export class MockOffscreenDocument {
  private channel: BroadcastChannel;
  private responses: BusMessage[] = [];

  constructor() {
    this.channel = new BroadcastChannel(BUS_CONFIG.CHANNEL_NAME);
    this.channel.addEventListener('message', (event) => {
      this.responses.push(event.data);
    });
  }

  sendAsk(provider: string, prompt: string): string {
    const message = createBusMessage('ask', { provider, prompt });
    this.channel.postMessage(message);
    return message.id;
  }

  sendBlobRequest(blobId: string): string {
    const message = createBusMessage('blobIdToObjectUrl', { id: blobId });
    this.channel.postMessage(message);
    return message.id;
  }

  getResponses(): BusMessage[] {
    return [...this.responses];
  }

  clearResponses(): void {
    this.responses = [];
  }

  destroy(): void {
    this.channel.close();
  }
}

// Export singleton instance
export const swBus = new ServiceWorkerBus();


================================================
FILE: src/__tests__/NetRules.test.ts
================================================
/**
 * DAY 3 - NET RULES TESTS
 * E2E test: open target URL â†’ verify content-security-policy header is removed
 */

import { NetRules, TEXT_ENDPOINTS, RULE_IDS, NetRuleConfig } from './NetRules';

// Mock Chrome declarativeNetRequest API
const mockRules: chrome.declarativeNetRequest.Rule[] = [];

global.chrome = {
  declarativeNetRequest: {
    updateDynamicRules: jest.fn(async (options: any) => {
      if (options.removeRuleIds) {
        options.removeRuleIds.forEach((id: number) => {
          const index = mockRules.findIndex(rule => rule.id === id);
          if (index !== -1) mockRules.splice(index, 1);
        });
      }
      if (options.addRules) {
        mockRules.push(...options.addRules);
      }
      return Promise.resolve();
    }),
    getDynamicRules: jest.fn(async () => {
      return Promise.resolve([...mockRules]);
    }),
    RuleActionType: {
      MODIFY_HEADERS: 'modifyHeaders' as any
    },
    HeaderOperation: {
      REMOVE: 'remove' as any,
      SET: 'set' as any
    },
    ResourceType: {
      XMLHTTPREQUEST: 'xmlhttprequest' as any
    }
  }
} as any;

describe('NetRules', () => {
  let netRules: NetRules;

  beforeEach(() => {
    // Clear mock rules
    mockRules.length = 0;
    
    // Reset mocks
    jest.clearAllMocks();
    
    // Get fresh NetRules instance
    netRules = NetRules.getInstance();
    
    // Reset initialization state (private property, but we need to reset for tests)
    (netRules as any).isInitialized = false;
    (netRules as any).activeRuleIds = [];
  });

  describe('Initialization', () => {
    test('initializes with default config', async () => {
      await netRules.init();
      
      expect(chrome.declarativeNetRequest.updateDynamicRules).toHaveBeenCalled();
      expect(netRules.initialized).toBe(true);
      expect(mockRules.length).toBeGreaterThan(0);
    });

    test('initializes with custom config', async () => {
      const customConfig: NetRuleConfig = {
        enableCSPStripping: true,
        enableAuthHeaders: false,
        providers: ['chatgpt']
      };

      await netRules.init(customConfig);
      
      expect(netRules.initialized).toBe(true);
      // Should only have CSP stripping rule for ChatGPT
      expect(mockRules).toHaveLength(1);
      expect(mockRules[0].id).toBe(RULE_IDS.CSP_STRIP_CHATGPT);
    });

    test('prevents double initialization', async () => {
      await netRules.init();
      const firstCallCount = (chrome.declarativeNetRequest.updateDynamicRules as jest.Mock).mock.calls.length;
      
      await netRules.init();
      const secondCallCount = (chrome.declarativeNetRequest.updateDynamicRules as jest.Mock).mock.calls.length;
      
      // Should not call updateDynamicRules again
      expect(secondCallCount).toBe(firstCallCount);
    });
  });

  describe('CSP Stripping Rules', () => {
    test('creates CSP stripping rules for all providers', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: true,
        enableAuthHeaders: false,
        providers: ['chatgpt', 'claude', 'gemini']
      };

      await netRules.init(config);

      // Should have 3 CSP stripping rules
      const cspRules = mockRules.filter(rule => 
        [RULE_IDS.CSP_STRIP_CHATGPT, RULE_IDS.CSP_STRIP_CLAUDE, RULE_IDS.CSP_STRIP_GEMINI].includes(rule.id)
      );
      expect(cspRules).toHaveLength(3);

      // Verify ChatGPT CSP rule
      const chatgptRule = mockRules.find(rule => rule.id === RULE_IDS.CSP_STRIP_CHATGPT);
      expect(chatgptRule).toBeDefined();
      expect(chatgptRule?.condition.urlFilter).toBe(TEXT_ENDPOINTS.CHATGPT);
      expect(chatgptRule?.action.type).toBe('modifyHeaders');
      
      const modifyAction = chatgptRule?.action as any;
      expect(modifyAction.responseHeaders).toEqual([
        {
          header: 'content-security-policy',
          operation: 'remove'
        },
        {
          header: 'content-security-policy-report-only',
          operation: 'remove'
        }
      ]);
    });

    test('verifies CSP header removal for Claude endpoint', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: true,
        enableAuthHeaders: false,
        providers: ['claude']
      };

      await netRules.init(config);

      const claudeRule = mockRules.find(rule => rule.id === RULE_IDS.CSP_STRIP_CLAUDE);
      expect(claudeRule).toBeDefined();
      expect(claudeRule?.condition.urlFilter).toBe(TEXT_ENDPOINTS.CLAUDE);
      
      const modifyAction = claudeRule?.action as any;
      expect(modifyAction.responseHeaders.some((header: any) => 
        header.header === 'content-security-policy' && header.operation === 'remove'
      )).toBe(true);
    });

    test('verifies CSP header removal for Gemini endpoint', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: true,
        enableAuthHeaders: false,
        providers: ['gemini']
      };

      await netRules.init(config);

      const geminiRule = mockRules.find(rule => rule.id === RULE_IDS.CSP_STRIP_GEMINI);
      expect(geminiRule).toBeDefined();
      expect(geminiRule?.condition.urlFilter).toBe(TEXT_ENDPOINTS.GEMINI);
      
      const modifyAction = geminiRule?.action as any;
      expect(modifyAction.responseHeaders.some((header: any) => 
        header.header === 'content-security-policy' && header.operation === 'remove'
      )).toBe(true);
    });
  });

  describe('Auth Header Rules', () => {
    test('creates auth header rules for all providers', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: false,
        enableAuthHeaders: true,
        providers: ['chatgpt', 'claude', 'gemini']
      };

      await netRules.init(config);

      // Should have 3 auth header rules
      const authRules = mockRules.filter(rule => 
        [RULE_IDS.AUTH_HEADER_CHATGPT, RULE_IDS.AUTH_HEADER_CLAUDE, RULE_IDS.AUTH_HEADER_GEMINI].includes(rule.id)
      );
      expect(authRules).toHaveLength(3);

      // Verify ChatGPT auth rule
      const chatgptRule = mockRules.find(rule => rule.id === RULE_IDS.AUTH_HEADER_CHATGPT);
      expect(chatgptRule).toBeDefined();
      
      const modifyAction = chatgptRule?.action as any;
      expect(modifyAction.requestHeaders).toEqual([
        {
          header: 'authorization',
          operation: 'set',
          value: 'Bearer {{HTOS_CHATGPT_TOKEN}}'
        }
      ]);
    });

    test('creates cookie-based auth for Claude', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: false,
        enableAuthHeaders: true,
        providers: ['claude']
      };

      await netRules.init(config);

      const claudeRule = mockRules.find(rule => rule.id === RULE_IDS.AUTH_HEADER_CLAUDE);
      expect(claudeRule).toBeDefined();
      
      const modifyAction = claudeRule?.action as any;
      expect(modifyAction.requestHeaders).toEqual([
        {
          header: 'cookie',
          operation: 'set',
          value: 'sessionKey={{HTOS_CLAUDE_TOKEN}}'
        }
      ]);
    });

    test('creates cookie-based auth for Gemini', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: false,
        enableAuthHeaders: true,
        providers: ['gemini']
      };

      await netRules.init(config);

      const geminiRule = mockRules.find(rule => rule.id === RULE_IDS.AUTH_HEADER_GEMINI);
      expect(geminiRule).toBeDefined();
      
      const modifyAction = geminiRule?.action as any;
      expect(modifyAction.requestHeaders).toEqual([
        {
          header: 'cookie',
          operation: 'set',
          value: '__Secure-1PSID={{HTOS_GEMINI_TOKEN}}'
        }
      ]);
    });
  });

  describe('Rule Management', () => {
    test('clears existing rules before adding new ones', async () => {
      // Add some mock existing rules
      mockRules.push({
        id: 999,
        priority: 1,
        action: { type: 'modifyHeaders' as any },
        condition: { urlFilter: 'test' }
      });

      await netRules.init();

      // Should have called updateDynamicRules to remove existing rules first
      const calls = (chrome.declarativeNetRequest.updateDynamicRules as jest.Mock).mock.calls;
      const clearCall = calls.find((call: any) => call[0].removeRuleIds);
      expect(clearCall).toBeDefined();
    });

    test('tracks active rule IDs', async () => {
      await netRules.init();
      
      const activeRuleIds = netRules.ruleIds;
      expect(activeRuleIds.length).toBeGreaterThan(0);
      expect(activeRuleIds).toContain(RULE_IDS.CSP_STRIP_CHATGPT);
    });

    test('clears all rules', async () => {
      await netRules.init();
      expect(mockRules.length).toBeGreaterThan(0);
      
      await netRules.clearRules();
      expect(mockRules.length).toBe(0);
    });

    test('gets active rules', async () => {
      await netRules.init();
      
      const activeRules = await netRules.getActiveRules();
      expect(activeRules.length).toBeGreaterThan(0);
    });
  });

  describe('Token Updates', () => {
    test('updates token placeholders in auth rules', async () => {
      const config: NetRuleConfig = {
        enableCSPStripping: false,
        enableAuthHeaders: true,
        providers: ['chatgpt']
      };

      await netRules.init(config);

      // Update tokens
      const tokens = { chatgpt: 'real-token-123' };
      await netRules.updateTokens(tokens);

      // Should have replaced the rule with updated token
      expect(chrome.declarativeNetRequest.updateDynamicRules).toHaveBeenCalledWith(
        expect.objectContaining({
          removeRuleIds: expect.any(Array),
          addRules: expect.arrayContaining([
            expect.objectContaining({
              action: expect.objectContaining({
                requestHeaders: expect.arrayContaining([
                  expect.objectContaining({
                    header: 'authorization',
                    value: 'Bearer real-token-123'
                  })
                ])
              })
            })
          ])
        })
      );
    });
  });

  describe('E2E Scenarios', () => {
    test('simulates full CSP stripping flow for ChatGPT endpoint', async () => {
      // Initialize with CSP stripping enabled
      const config: NetRuleConfig = {
        enableCSPStripping: true,
        enableAuthHeaders: false,
        providers: ['chatgpt']
      };

      await netRules.init(config);

      // Verify that a request to ChatGPT backend-api would have CSP stripped
      const chatgptRule = mockRules.find(rule => rule.id === RULE_IDS.CSP_STRIP_CHATGPT);
      expect(chatgptRule).toBeDefined();
      
      // Simulate request matching
      const testUrl = 'https://chat.openai.com/backend-api/conversation';
      expect(testUrl).toMatch(/https:\/\/chat\.openai\.com\/backend-api\/.*/);
      
      // Verify CSP headers would be removed
      const modifyAction = chatgptRule?.action as any;
      const cspRemovalRule = modifyAction.responseHeaders.find((header: any) => 
        header.header === 'content-security-policy' && header.operation === 'remove'
      );
      expect(cspRemovalRule).toBeDefined();
    });

    test('simulates full auth injection flow for all providers', async () => {
      // Initialize with auth headers enabled
      await netRules.init();

      // Update with real tokens
      const tokens = {
        chatgpt: 'sk-real-token-123',
        claude: 'sess-real-token-456',
        gemini: 'psid-real-token-789'
      };
      
      await netRules.updateTokens(tokens);

      // Verify rules were updated with real tokens
      const updateCall = (chrome.declarativeNetRequest.updateDynamicRules as jest.Mock).mock.calls
        .find((call: any) => call[0].addRules?.some((rule: any) => 
          rule.action.requestHeaders?.some((header: any) => 
            header.value?.includes('sk-real-token-123')
          )
        ));
      
      expect(updateCall).toBeDefined();
    });
  });
});


================================================
FILE: src/__tests__/StateManager.test.ts
================================================
/**
 * DAY 2 - STATE SKELETON TESTS
 * Unit tests for StateManager hydrate/mutate/persist round-trip
 */

import { StateManager, Chat, Message } from './StateManager';

// Mock Chrome storage APIs
const mockSessionStorage = new Map();
const mockLocalStorage = new Map();

global.chrome = {
  storage: {
    session: {
      get: jest.fn((keys: string[]) => {
        const result: any = {};
        keys.forEach(key => {
          if (mockSessionStorage.has(key)) {
            result[key] = mockSessionStorage.get(key);
          }
        });
        return Promise.resolve(result);
      }),
      set: jest.fn((items: any) => {
        Object.entries(items).forEach(([key, value]) => {
          mockSessionStorage.set(key, value);
        });
        return Promise.resolve();
      })
    },
    local: {
      get: jest.fn((keys: string[]) => {
        const result: any = {};
        keys.forEach(key => {
          if (mockLocalStorage.has(key)) {
            result[key] = mockLocalStorage.get(key);
          }
        });
        return Promise.resolve(result);
      }),
      set: jest.fn((items: any) => {
        Object.entries(items).forEach(([key, value]) => {
          mockLocalStorage.set(key, value);
        });
        return Promise.resolve();
      })
    }
  }
} as any;

describe('StateManager', () => {
  let stateManager: StateManager;

  beforeEach(() => {
    // Clear mock storage
    mockSessionStorage.clear();
    mockLocalStorage.clear();
    
    // Create fresh StateManager instance
    stateManager = new StateManager();
  });

  describe('Chat Operations', () => {
    test('addChat and getChat', () => {
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      stateManager.addChat(chat);
      expect(stateManager.getChat('chat-1')).toEqual(chat);
    });

    test('updateChat', () => {
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      stateManager.addChat(chat);
      
      const message: Message = {
        id: 'msg-1',
        role: 'user',
        content: 'Hello',
        timestamp: new Date()
      };

      stateManager.updateChat('chat-1', { messages: [message] });
      
      const updatedChat = stateManager.getChat('chat-1');
      expect(updatedChat?.messages).toEqual([message]);
    });

    test('deleteChat', () => {
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      stateManager.addChat(chat);
      expect(stateManager.getChat('chat-1')).toEqual(chat);
      
      const deleted = stateManager.deleteChat('chat-1');
      expect(deleted).toBe(true);
      expect(stateManager.getChat('chat-1')).toBeUndefined();
    });
  });

  describe('Token Operations', () => {
    test('setToken and getToken', () => {
      stateManager.setToken('chatgpt', 'token-123');
      expect(stateManager.getToken('chatgpt')).toBe('token-123');
    });

    test('deleteToken', () => {
      stateManager.setToken('chatgpt', 'token-123');
      expect(stateManager.getToken('chatgpt')).toBe('token-123');
      
      const deleted = stateManager.deleteToken('chatgpt');
      expect(deleted).toBe(true);
      expect(stateManager.getToken('chatgpt')).toBeUndefined();
    });
  });

  describe('Cursor Operations', () => {
    test('setCursor and getCursor', () => {
      stateManager.setCursor('claude', 'cursor-abc');
      expect(stateManager.getCursor('claude')).toBe('cursor-abc');
    });

    test('deleteCursor', () => {
      stateManager.setCursor('claude', 'cursor-abc');
      expect(stateManager.getCursor('claude')).toBe('cursor-abc');
      
      const deleted = stateManager.deleteCursor('claude');
      expect(deleted).toBe(true);
      expect(stateManager.getCursor('claude')).toBeUndefined();
    });
  });

  describe('Persistence Round-Trip', () => {
    test('hydrate/mutate/persist round-trip for chats', async () => {
      // Setup initial data
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [{
          id: 'msg-1',
          role: 'user',
          content: 'Hello world',
          timestamp: new Date()
        }],
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // Add chat (triggers persist)
      stateManager.addChat(chat);

      // Verify persistence was called
      expect(chrome.storage.session.set).toHaveBeenCalled();
      expect(chrome.storage.local.set).toHaveBeenCalled();

      // Create new StateManager instance to test hydration
      const newStateManager = new StateManager();
      await newStateManager.hydrate();

      // Verify data was restored
      const restoredChat = newStateManager.getChat('chat-1');
      expect(restoredChat?.id).toBe(chat.id);
      expect(restoredChat?.provider).toBe(chat.provider);
      expect(restoredChat?.messages).toHaveLength(1);
    });

    test('hydrate/mutate/persist round-trip for tokens', async () => {
      // Add token (triggers persist)
      stateManager.setToken('chatgpt', 'secret-token-123');

      // Verify persistence was called
      expect(chrome.storage.session.set).toHaveBeenCalled();

      // Create new StateManager instance to test hydration
      const newStateManager = new StateManager();
      await newStateManager.hydrate();

      // Verify token was restored (from session storage only)
      expect(newStateManager.getToken('chatgpt')).toBe('secret-token-123');
    });

    test('hydrate/mutate/persist round-trip for cursors', async () => {
      // Add cursor (triggers persist)
      stateManager.setCursor('claude', 'page-cursor-xyz');

      // Verify persistence was called
      expect(chrome.storage.session.set).toHaveBeenCalled();
      expect(chrome.storage.local.set).toHaveBeenCalled();

      // Create new StateManager instance to test hydration
      const newStateManager = new StateManager();
      await newStateManager.hydrate();

      // Verify cursor was restored
      expect(newStateManager.getCursor('claude')).toBe('page-cursor-xyz');
    });

    test('session storage takes precedence over local storage', async () => {
      // Setup conflicting data in session vs local storage
      mockSessionStorage.set('htos_cursors_session', [['claude', 'session-cursor']]);
      mockLocalStorage.set('htos_cursors_persistent', [['claude', 'local-cursor']]);

      // Create new StateManager and hydrate
      const newStateManager = new StateManager();
      await newStateManager.hydrate();

      // Session storage should take precedence
      expect(newStateManager.getCursor('claude')).toBe('session-cursor');
    });
  });

  describe('Utility Methods', () => {
    test('getState returns copies of all slices', () => {
      // Add some data
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };
      stateManager.addChat(chat);
      stateManager.setToken('chatgpt', 'token-123');
      stateManager.setCursor('claude', 'cursor-abc');

      // Get state
      const state = stateManager.getState();

      // Verify all slices are present
      expect(state.chats.has('chat-1')).toBe(true);
      expect(state.tokens.has('chatgpt')).toBe(true);
      expect(state.cursors.has('claude')).toBe(true);

      // Verify they are copies (not references)
      expect(state.chats).not.toBe(stateManager.chats);
      expect(state.tokens).not.toBe(stateManager.tokens);
      expect(state.cursors).not.toBe(stateManager.cursors);
    });

    test('clear removes all data', () => {
      // Add some data
      const chat: Chat = {
        id: 'chat-1',
        provider: 'chatgpt',
        messages: [],
        createdAt: new Date(),
        updatedAt: new Date()
      };
      stateManager.addChat(chat);
      stateManager.setToken('chatgpt', 'token-123');
      stateManager.setCursor('claude', 'cursor-abc');

      // Verify data exists
      expect(stateManager.chats.size).toBe(1);
      expect(stateManager.tokens.size).toBe(1);
      expect(stateManager.cursors.size).toBe(1);

      // Clear all data
      stateManager.clear();

      // Verify all data is gone
      expect(stateManager.chats.size).toBe(0);
      expect(stateManager.tokens.size).toBe(0);
      expect(stateManager.cursors.size).toBe(0);
    });
  });
});


================================================
FILE: src/__tests__/sw.test.ts
================================================
/**
 * DAY 6 - BUS IMPLEMENTATION TESTS
 * Unit test with fake offscreen document
 */

import { ServiceWorkerBus, MockOffscreenDocument } from './sw';
import { createBusMessage } from './events';
import { ProviderRegistry } from './ProviderRegistry';
import { stateManager } from './StateManager';
import { netRules } from './NetRules';

// Mock dependencies
jest.mock('./ProviderRegistry');
jest.mock('./StateManager');
jest.mock('./NetRules');

// Mock chrome APIs
global.chrome = {
  runtime: {
    getURL: jest.fn((path: string) => `chrome-extension://test-id/${path}`)
  }
} as any;

// Mock BroadcastChannel
class MockBroadcastChannel {
  private listeners: ((event: MessageEvent) => void)[] = [];
  private static channels: Map<string, MockBroadcastChannel[]> = new Map();

  constructor(public name: string) {
    if (!MockBroadcastChannel.channels.has(name)) {
      MockBroadcastChannel.channels.set(name, []);
    }
    MockBroadcastChannel.channels.get(name)!.push(this);
  }

  addEventListener(type: string, listener: (event: MessageEvent) => void) {
    if (type === 'message') {
      this.listeners.push(listener);
    }
  }

  postMessage(data: any) {
    // Simulate broadcasting to other channels with the same name
    const channels = MockBroadcastChannel.channels.get(this.name) || [];
    setTimeout(() => {
      channels.forEach(channel => {
        if (channel !== this) {
          channel.listeners.forEach(listener => {
            listener({ data } as MessageEvent);
          });
        }
      });
    }, 0);
  }

  close() {
    const channels = MockBroadcastChannel.channels.get(this.name);
    if (channels) {
      const index = channels.indexOf(this);
      if (index > -1) {
        channels.splice(index, 1);
      }
    }
  }

  static reset() {
    this.channels.clear();
  }
}

global.BroadcastChannel = MockBroadcastChannel as any;

describe('ServiceWorkerBus', () => {
  let swBus: ServiceWorkerBus;
  let mockOffscreen: MockOffscreenDocument;
  let mockProviderRegistry: jest.Mocked<typeof ProviderRegistry>;
  let mockStateManager: jest.Mocked<typeof stateManager>;
  let mockNetRules: jest.Mocked<typeof netRules>;

  beforeEach(async () => {
    // Reset broadcast channels
    MockBroadcastChannel.reset();

    // Setup mocks
    mockProviderRegistry = ProviderRegistry as jest.Mocked<typeof ProviderRegistry>;
    mockStateManager = stateManager as jest.Mocked<typeof stateManager>;
    mockNetRules = netRules as jest.Mocked<typeof netRules>;

    mockNetRules.init.mockResolvedValue();
    mockStateManager.hydrate.mockResolvedValue();
    mockProviderRegistry.isProviderAvailable.mockReturnValue(true);

    // Create instances
    swBus = new ServiceWorkerBus();
    mockOffscreen = new MockOffscreenDocument();

    // Initialize
    await swBus.init();
  });

  afterEach(() => {
    swBus.destroy();
    mockOffscreen.destroy();
    MockBroadcastChannel.reset();
    jest.clearAllMocks();
  });

  describe('Initialization', () => {
    test('initializes successfully', async () => {
      expect(mockNetRules.init).toHaveBeenCalled();
      expect(mockStateManager.hydrate).toHaveBeenCalled();
      expect(swBus.isHealthy).toBe(true);
    });

    test('prevents double initialization', async () => {
      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
      
      await swBus.init(); // Second initialization
      
      expect(consoleSpy).toHaveBeenCalledWith('ServiceWorkerBus: Already initialized');
      consoleSpy.mockRestore();
    });
  });

  describe('Ask Event Handling', () => {
    test('handles ask event and streams response', async () => {
      // Mock streaming response
      async function* mockStream() {
        yield 'Hello';
        yield ' ';
        yield 'world';
      }
      mockProviderRegistry.ask.mockReturnValue(mockStream());

      // Send ask request
      const requestId = mockOffscreen.sendAsk('openai', 'Test prompt');
      
      // Wait for processing
      await new Promise(resolve => setTimeout(resolve, 50));

      const responses = mockOffscreen.getResponses();
      
      // Should receive chunk messages and done message
      const chunks = responses.filter(r => r.type === 'chunk');
      const done = responses.find(r => r.type === 'done');

      expect(chunks.length).toBe(3); // 'Hello', ' ', 'world'
      expect(chunks[0].payload.data).toBe('Hello');
      expect(chunks[1].payload.data).toBe(' ');
      expect(chunks[2].payload.data).toBe('world');
      
      expect(done).toBeDefined();
      expect(done?.payload.id).toBe(requestId);
      expect(done?.payload.error).toBeUndefined();
      expect(done?.payload.usage).toBeDefined();
    });

    test('handles provider unavailable error', async () => {
      mockProviderRegistry.isProviderAvailable.mockReturnValue(false);

      const requestId = mockOffscreen.sendAsk('openai', 'Test prompt');
      
      await new Promise(resolve => setTimeout(resolve, 50));

      const responses = mockOffscreen.getResponses();
      const done = responses.find(r => r.type === 'done');

      expect(done).toBeDefined();
      expect(done?.payload.error).toContain('not available');
    });

    test('handles provider error during streaming', async () => {
      async function* mockErrorStream() {
        yield 'Hello';
        throw new Error('Provider error');
      }
      mockProviderRegistry.ask.mockReturnValue(mockErrorStream());

      const requestId = mockOffscreen.sendAsk('openai', 'Test prompt');
      
      await new Promise(resolve => setTimeout(resolve, 50));

      const responses = mockOffscreen.getResponses();
      const chunks = responses.filter(r => r.type === 'chunk');
      const done = responses.find(r => r.type === 'done');

      expect(chunks.length).toBe(1); // Only 'Hello' before error
      expect(done?.payload.error).toBe('Provider error');
    });

    test('cancels active request', async () => {
      // Mock long-running stream
      async function* mockLongStream() {
        for (let i = 0; i < 100; i++) {
          yield `chunk ${i}`;
          await new Promise(resolve => setTimeout(resolve, 10));
        }
      }
      mockProviderRegistry.ask.mockReturnValue(mockLongStream());

      const requestId = mockOffscreen.sendAsk('openai', 'Test prompt');
      
      // Wait a bit then cancel
      await new Promise(resolve => setTimeout(resolve, 20));
      const cancelled = swBus.cancelRequest(requestId);

      expect(cancelled).toBe(true);
      expect(swBus.activeRequestCount).toBe(0);
    });
  });

  describe('BlobIdToObjectUrl Event Handling', () => {
    test('handles blob URL generation', async () => {
      const requestId = mockOffscreen.sendBlobRequest('test-blob-123');
      
      await new Promise(resolve => setTimeout(resolve, 50));

      const responses = mockOffscreen.getResponses();
      const chunk = responses.find(r => r.type === 'chunk');
      const done = responses.find(r => r.type === 'done');

      expect(chunk).toBeDefined();
      expect(chunk?.payload.data).toBe('chrome-extension://test-id/_blob/test-blob-123');
      
      expect(done).toBeDefined();
      expect(done?.payload.error).toBeUndefined();
    });
  });

  describe('Message Broadcasting', () => {
    test('broadcasts messages to offscreen document', async () => {
      swBus.broadcast('chunk', { id: 'test-123', data: 'test data' });
      
      await new Promise(resolve => setTimeout(resolve, 10));

      const responses = mockOffscreen.getResponses();
      expect(responses.length).toBe(1);
      expect(responses[0].type).toBe('chunk');
      expect(responses[0].payload.data).toBe('test data');
    });
  });

  describe('Request Management', () => {
    test('tracks active requests', async () => {
      // Mock slow stream
      async function* mockSlowStream() {
        await new Promise(resolve => setTimeout(resolve, 100));
        yield 'slow response';
      }
      mockProviderRegistry.ask.mockReturnValue(mockSlowStream());

      expect(swBus.activeRequestCount).toBe(0);
      
      mockOffscreen.sendAsk('openai', 'Test prompt');
      
      // Check immediately after sending
      await new Promise(resolve => setTimeout(resolve, 10));
      expect(swBus.activeRequestCount).toBe(1);
      
      // Wait for completion
      await new Promise(resolve => setTimeout(resolve, 200));
      expect(swBus.activeRequestCount).toBe(0);
    });
  });

  describe('Error Handling', () => {
    test('handles invalid messages gracefully', async () => {
      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
      
      // Send invalid message through BroadcastChannel
      const channel = new (BroadcastChannel as any)('bus.channel');
      channel.postMessage(null);
      channel.postMessage('invalid');
      channel.postMessage({ type: 'unknown', payload: {} });
      
      await new Promise(resolve => setTimeout(resolve, 10));
      
      expect(consoleSpy).toHaveBeenCalledWith('ServiceWorkerBus: Invalid message received', null);
      expect(consoleSpy).toHaveBeenCalledWith('ServiceWorkerBus: Invalid message received', 'invalid');
      expect(consoleSpy).toHaveBeenCalledWith('ServiceWorkerBus: No handler for message type: unknown');
      
      consoleSpy.mockRestore();
    });
  });

  describe('Cleanup', () => {
    test('destroys cleanly', () => {
      const initialRequestCount = swBus.activeRequestCount;
      
      swBus.destroy();
      
      expect(swBus.isHealthy).toBe(false);
      expect(swBus.activeRequestCount).toBe(0);
    });
  });
});

describe('MockOffscreenDocument', () => {
  let mockOffscreen: MockOffscreenDocument;

  beforeEach(() => {
    MockBroadcastChannel.reset();
    mockOffscreen = new MockOffscreenDocument();
  });

  afterEach(() => {
    mockOffscreen.destroy();
    MockBroadcastChannel.reset();
  });

  test('sends ask messages correctly', () => {
    const requestId = mockOffscreen.sendAsk('openai', 'test prompt');
    
    expect(typeof requestId).toBe('string');
    expect(requestId.length).toBeGreaterThan(0);
  });

  test('sends blob requests correctly', () => {
    const requestId = mockOffscreen.sendBlobRequest('blob-123');
    
    expect(typeof requestId).toBe('string');
    expect(requestId.length).toBeGreaterThan(0);
  });

  test('collects responses', async () => {
    // Simulate receiving responses
    const channel = new (BroadcastChannel as any)('bus.channel');
    channel.postMessage({ type: 'chunk', payload: { id: 'test', data: 'data' } });
    
    await new Promise(resolve => setTimeout(resolve, 10));
    
    const responses = mockOffscreen.getResponses();
    expect(responses.length).toBe(1);
    expect(responses[0].type).toBe('chunk');
  });

  test('clears responses', async () => {
    // Add some responses
    const channel = new (BroadcastChannel as any)('bus.channel');
    channel.postMessage({ type: 'chunk', payload: { id: 'test', data: 'data' } });
    
    await new Promise(resolve => setTimeout(resolve, 10));
    
    expect(mockOffscreen.getResponses().length).toBe(1);
    
    mockOffscreen.clearResponses();
    expect(mockOffscreen.getResponses().length).toBe(0);
  });
});


================================================
FILE: src/__tests__/utils.test.ts
================================================
/**
 * DAY 1 - UTILS MINIMAL TESTS
 * Unit tests for essential utilities
 */

import { cloneDeep, deepEqual, get, set, truncate, escapeRegExp } from './utils';

// Test cloneDeep
describe('cloneDeep', () => {
  test('clones primitive values', () => {
    expect(cloneDeep(42)).toBe(42);
    expect(cloneDeep('hello')).toBe('hello');
    expect(cloneDeep(true)).toBe(true);
    expect(cloneDeep(null)).toBe(null);
    expect(cloneDeep(undefined)).toBe(undefined);
  });

  test('clones arrays', () => {
    const arr = [1, 2, { a: 3 }];
    const cloned = cloneDeep(arr);
    expect(cloned).toEqual(arr);
    expect(cloned).not.toBe(arr);
    expect(cloned[2]).not.toBe(arr[2]);
  });

  test('clones objects', () => {
    const obj = { a: 1, b: { c: 2 } };
    const cloned = cloneDeep(obj);
    expect(cloned).toEqual(obj);
    expect(cloned).not.toBe(obj);
    expect(cloned.b).not.toBe(obj.b);
  });

  test('clones dates', () => {
    const date = new Date('2024-01-01');
    const cloned = cloneDeep(date);
    expect(cloned).toEqual(date);
    expect(cloned).not.toBe(date);
  });
});

// Test deepEqual
describe('deepEqual', () => {
  test('compares primitive values', () => {
    expect(deepEqual(42, 42)).toBe(true);
    expect(deepEqual('hello', 'hello')).toBe(true);
    expect(deepEqual(true, true)).toBe(true);
    expect(deepEqual(null, null)).toBe(true);
    expect(deepEqual(42, 43)).toBe(false);
    expect(deepEqual('hello', 'world')).toBe(false);
  });

  test('compares arrays', () => {
    expect(deepEqual([1, 2, 3], [1, 2, 3])).toBe(true);
    expect(deepEqual([1, 2], [1, 2, 3])).toBe(false);
    expect(deepEqual([1, { a: 2 }], [1, { a: 2 }])).toBe(true);
  });

  test('compares objects', () => {
    expect(deepEqual({ a: 1, b: 2 }, { a: 1, b: 2 })).toBe(true);
    expect(deepEqual({ a: 1, b: 2 }, { b: 2, a: 1 })).toBe(true);
    expect(deepEqual({ a: 1 }, { a: 1, b: 2 })).toBe(false);
    expect(deepEqual({ a: { b: 1 } }, { a: { b: 1 } })).toBe(true);
  });
});

// Test get
describe('get', () => {
  const obj = { 
    a: { 
      b: { 
        c: 'value' 
      } 
    },
    arr: [{ x: 1 }, { y: 2 }]
  };

  test('gets nested values with string path', () => {
    expect(get(obj, 'a.b.c')).toBe('value');
    expect(get(obj, 'a.b')).toEqual({ c: 'value' });
  });

  test('gets nested values with array path', () => {
    expect(get(obj, ['a', 'b', 'c'])).toBe('value');
  });

  test('returns default value for missing paths', () => {
    expect(get(obj, 'a.b.d', 'default')).toBe('default');
    expect(get(obj, 'x.y.z', 42)).toBe(42);
  });

  test('handles null/undefined objects', () => {
    expect(get(null, 'a.b', 'default')).toBe('default');
    expect(get(undefined, 'a.b', 'default')).toBe('default');
  });
});

// Test set
describe('set', () => {
  test('sets nested values with string path', () => {
    const obj = {};
    set(obj, 'a.b.c', 'value');
    expect(obj).toEqual({ a: { b: { c: 'value' } } });
  });

  test('sets nested values with array path', () => {
    const obj = {};
    set(obj, ['a', 'b', 'c'], 'value');
    expect(obj).toEqual({ a: { b: { c: 'value' } } });
  });

  test('overwrites existing values', () => {
    const obj = { a: { b: 'old' } };
    set(obj, 'a.b', 'new');
    expect(obj.a.b).toBe('new');
  });

  test('creates intermediate objects', () => {
    const obj = { a: 1 };
    set(obj, 'a.b.c', 'value');
    expect(obj).toEqual({ a: { b: { c: 'value' } } });
  });
});

// Test truncate
describe('truncate', () => {
  test('truncates long strings', () => {
    expect(truncate('hello world', 8)).toBe('hello...');
    expect(truncate('hello world', 8, '...')).toBe('hello...');
  });

  test('does not truncate short strings', () => {
    expect(truncate('hello', 10)).toBe('hello');
  });

  test('uses custom suffix', () => {
    expect(truncate('hello world', 8, '***')).toBe('hello***');
  });

  test('handles edge cases', () => {
    expect(truncate('', 5)).toBe('');
    expect(truncate('hello', 5)).toBe('hello');
    expect(truncate('hello', 3, '...')).toBe('...');
  });
});

// Test escapeRegExp
describe('escapeRegExp', () => {
  test('escapes regex special characters', () => {
    expect(escapeRegExp('hello.world')).toBe('hello\\.world');
    expect(escapeRegExp('test*pattern')).toBe('test\\*pattern');
    expect(escapeRegExp('a+b?c^d$e')).toBe('a\\+b\\?c\\^d\\$e');
    expect(escapeRegExp('(group)|choice')).toBe('\\(group\\)\\|choice');
    expect(escapeRegExp('[class]')).toBe('\\[class\\]');
    expect(escapeRegExp('{1,2}')).toBe('\\{1,2\\}');
    expect(escapeRegExp('back\\slash')).toBe('back\\\\slash');
  });

  test('does not escape normal characters', () => {
    expect(escapeRegExp('hello')).toBe('hello');
    expect(escapeRegExp('123')).toBe('123');
    expect(escapeRegExp('hello_world')).toBe('hello_world');
  });

  test('handles empty string', () => {
    expect(escapeRegExp('')).toBe('');
  });
});


================================================
FILE: src/bus/events.ts
================================================
/**
 * DAY 5 - BUS CONTRACT LOCK
 * Frozen bus/contracts/events.ts with exact 5 events
 * This contract is IMMUTABLE and defines the text-only message bus API
 */

// FROZEN CONTRACT - DO NOT MODIFY
export type TextEvents = {
  'ask': { provider: string; prompt: string };
  'chunk': { id: string; data: string };
  'done': { id: string; usage?: any; error?: string };
  'blobIdToObjectUrl': { id: string };
};

// Event type union for type safety
export type TextEventType = keyof TextEvents;

// Event payload type helper
export type TextEventPayload<T extends TextEventType> = TextEvents[T];

// Event message structure
export interface BusMessage<T extends TextEventType = TextEventType> {
  type: T;
  payload: TextEventPayload<T>;
  id: string;
  timestamp: number;
}

// Bus channel configuration
export const BUS_CONFIG = {
  CHANNEL_NAME: 'bus.channel',
  BLOB_URL_PREFIX: '_blob/',
  MAX_RETRY_ATTEMPTS: 3,
  TIMEOUT_MS: 30000
} as const;

// Event validation helpers
export function isValidEventType(type: string): type is TextEventType {
  return ['ask', 'chunk', 'done', 'blobIdToObjectUrl'].includes(type);
}

export function validateEventPayload<T extends TextEventType>(
  type: T, 
  payload: any
): payload is TextEventPayload<T> {
  switch (type) {
    case 'ask':
      return typeof payload === 'object' && 
             typeof payload.provider === 'string' && 
             typeof payload.prompt === 'string';
    
    case 'chunk':
      return typeof payload === 'object' && 
             typeof payload.id === 'string' && 
             typeof payload.data === 'string';
    
    case 'done':
      return typeof payload === 'object' && 
             typeof payload.id === 'string' &&
             (payload.usage === undefined || typeof payload.usage === 'object') &&
             (payload.error === undefined || typeof payload.error === 'string');
    
    case 'blobIdToObjectUrl':
      return typeof payload === 'object' && 
             typeof payload.id === 'string';
    
    default:
      return false;
  }
}

// Message factory
export function createBusMessage<T extends TextEventType>(
  type: T,
  payload: TextEventPayload<T>
): BusMessage<T> {
  if (!validateEventPayload(type, payload)) {
    throw new Error(`Invalid payload for event type: ${type}`);
  }

  return {
    type,
    payload,
    id: crypto.randomUUID(),
    timestamp: Date.now()
  };
}

// Error types for bus operations
export class BusError extends Error {
  constructor(
    message: string,
    public readonly eventType?: TextEventType,
    public readonly originalError?: Error
  ) {
    super(message);
    this.name = 'BusError';
  }
}

export class BusTimeoutError extends BusError {
  constructor(eventType: TextEventType, timeoutMs: number) {
    super(`Bus operation timed out after ${timeoutMs}ms for event: ${eventType}`, eventType);
    this.name = 'BusTimeoutError';
  }
}

export class BusValidationError extends BusError {
  constructor(eventType: TextEventType, details: string) {
    super(`Validation failed for event ${eventType}: ${details}`, eventType);
    this.name = 'BusValidationError';
  }
}


================================================
FILE: src/bus/os.ts
================================================
/**
 * DAY 7 - OFFSCREEN DOC (OS SIDE)
 * Offscreen document implementation
 * - chrome.offscreen.createDocument singleton
 * - Hosts text-only iframes (no visual chrome)
 * - Relays blob â†” token securely
 */

import { 
  TextEventType, 
  TextEventPayload, 
  BusMessage, 
  BUS_CONFIG, 
  createBusMessage,
  BusError
} from './events';
import { stateManager } from './StateManager';

// Offscreen document configuration
export const OFFSCREEN_CONFIG = {
  URL: 'agent/offscreen.html',
  REASONS: ['USER_MEDIA', 'GEOLOCATION'],
  JUSTIFICATION: 'Text-only provider iframes for secure authentication'
} as const;

// Provider iframe configurations
interface IframeConfig {
  url: string;
  sandbox: string[];
  allowedOrigins: string[];
}

const IFRAME_CONFIGS: Record<string, IframeConfig> = {
  openai: {
    url: 'https://chat.openai.com',
    sandbox: ['allow-scripts', 'allow-same-origin', 'allow-forms'],
    allowedOrigins: ['https://chat.openai.com']
  },
  claude: {
    url: 'https://claude.ai',
    sandbox: ['allow-scripts', 'allow-same-origin', 'allow-forms'],
    allowedOrigins: ['https://claude.ai']
  },
  gemini: {
    url: 'https://gemini.google.com',
    sandbox: ['allow-scripts', 'allow-same-origin', 'allow-forms'],
    allowedOrigins: ['https://gemini.google.com']
  }
};

// Offscreen Document Manager
export class OffscreenDocument {
  private static instance: OffscreenDocument;
  private channel: BroadcastChannel;
  private iframes: Map<string, HTMLIFrameElement> = new Map();
  private tokenCache: Map<string, string> = new Map();
  private isInitialized = false;

  private constructor() {
    this.channel = new BroadcastChannel(BUS_CONFIG.CHANNEL_NAME);
    this.setupMessageHandlers();
  }

  public static getInstance(): OffscreenDocument {
    if (!OffscreenDocument.instance) {
      OffscreenDocument.instance = new OffscreenDocument();
    }
    return OffscreenDocument.instance;
  }

  /**
   * Create and initialize offscreen document
   */
  public static async create(): Promise<OffscreenDocument> {
    try {
      // Check if offscreen document already exists
      const existingContexts = await chrome.runtime.getContexts({
        contextTypes: ['OFFSCREEN_DOCUMENT']
      });

      if (existingContexts.length === 0) {
        // Create new offscreen document
        await chrome.offscreen.createDocument({
          url: OFFSCREEN_CONFIG.URL,
          reasons: OFFSCREEN_CONFIG.REASONS as any,
          justification: OFFSCREEN_CONFIG.JUSTIFICATION
        });
      }

      const instance = OffscreenDocument.getInstance();
      await instance.init();
      return instance;
    } catch (error) {
      console.error('OffscreenDocument: Failed to create', error);
      throw error;
    }
  }

  /**
   * Initialize the offscreen document
   */
  private async init(): Promise<void> {
    if (this.isInitialized) {
      console.warn('OffscreenDocument: Already initialized');
      return;
    }

    try {
      // Load tokens from state manager
      await this.loadTokens();

      // Create provider iframes
      await this.createProviderIframes();

      this.isInitialized = true;
      console.log('OffscreenDocument: Initialized successfully');
    } catch (error) {
      console.error('OffscreenDocument: Failed to initialize', error);
      throw error;
    }
  }

  /**
   * Setup message handlers
   */
  private setupMessageHandlers(): void {
    this.channel.addEventListener('message', this.handleMessage.bind(this));
  }

  /**
   * Handle messages from service worker
   */
  private async handleMessage(event: MessageEvent<BusMessage>): Promise<void> {
    const message = event.data;
    
    if (!message || typeof message !== 'object') {
      console.warn('OffscreenDocument: Invalid message received', message);
      return;
    }

    try {
      switch (message.type) {
        case 'chunk':
          await this.handleChunk(message as BusMessage<'chunk'>);
          break;
        case 'done':
          await this.handleDone(message as BusMessage<'done'>);
          break;
        default:
          console.warn(`OffscreenDocument: Unhandled message type: ${message.type}`);
      }
    } catch (error) {
      console.error(`OffscreenDocument: Error handling ${message.type}:`, error);
    }
  }

  /**
   * Handle chunk messages (text data or blob URLs)
   */
  private async handleChunk(message: BusMessage<'chunk'>): Promise<void> {
    const { id, data } = message.payload;
    
    // If it's a blob URL, store it for the UI
    if (data.startsWith('chrome-extension://')) {
      console.log(`OffscreenDocument: Received blob URL for ${id}: ${data}`);
      // Store blob URL in local storage for UI access
      localStorage.setItem(`blob_url_${id}`, data);
    } else {
      // It's text data - could relay to UI if needed
      console.log(`OffscreenDocument: Received chunk for ${id}: ${data.slice(0, 50)}...`);
    }
  }

  /**
   * Handle done messages (completion or error)
   */
  private async handleDone(message: BusMessage<'done'>): Promise<void> {
    const { id, usage, error } = message.payload;
    
    if (error) {
      console.error(`OffscreenDocument: Request ${id} failed: ${error}`);
    } else {
      console.log(`OffscreenDocument: Request ${id} completed`, usage);
    }

    // Clean up any related resources
    this.cleanupRequest(id);
  }

  /**
   * Load authentication tokens from secure storage
   */
  private async loadTokens(): Promise<void> {
    try {
      // Load from StateManager
      await stateManager.hydrate();
      
      // Cache tokens for iframe communication
      const providers = ['openai', 'claude', 'gemini'];
      for (const provider of providers) {
        const token = stateManager.getToken(provider);
        if (token) {
          this.tokenCache.set(provider, token);
        }
      }

      console.log(`OffscreenDocument: Loaded ${this.tokenCache.size} tokens`);
    } catch (error) {
      console.error('OffscreenDocument: Failed to load tokens', error);
    }
  }

  /**
   * Create text-only iframes for each provider
   */
  private async createProviderIframes(): Promise<void> {
    const container = document.getElementById('iframe-container') || this.createIframeContainer();

    for (const [provider, config] of Object.entries(IFRAME_CONFIGS)) {
      try {
        const iframe = this.createProviderIframe(provider, config);
        container.appendChild(iframe);
        this.iframes.set(provider, iframe);
        
        console.log(`OffscreenDocument: Created iframe for ${provider}`);
      } catch (error) {
        console.error(`OffscreenDocument: Failed to create iframe for ${provider}:`, error);
      }
    }
  }

  /**
   * Create iframe container element
   */
  private createIframeContainer(): HTMLElement {
    const container = document.createElement('div');
    container.id = 'iframe-container';
    container.style.display = 'none'; // Hidden - text-only
    document.body.appendChild(container);
    return container;
  }

  /**
   * Create individual provider iframe
   */
  private createProviderIframe(provider: string, config: IframeConfig): HTMLIFrameElement {
    const iframe = document.createElement('iframe');
    
    // Security configuration
    iframe.src = config.url;
    iframe.sandbox.add(...config.sandbox);
    iframe.style.display = 'none'; // Hidden - text-only
    iframe.width = '0';
    iframe.height = '0';
    
    // Set iframe attributes for identification
    iframe.setAttribute('data-provider', provider);
    iframe.setAttribute('data-purpose', 'text-only-auth');

    // Setup message handler for iframe communication
    iframe.addEventListener('load', () => {
      this.setupIframeAuth(provider, iframe);
    });

    return iframe;
  }

  /**
   * Setup authentication for provider iframe
   */
  private async setupIframeAuth(provider: string, iframe: HTMLIFrameElement): Promise<void> {
    try {
      const token = this.tokenCache.get(provider);
      if (!token) {
        console.warn(`OffscreenDocument: No token available for ${provider}`);
        return;
      }

      // Inject authentication into iframe
      await this.injectProviderAuth(provider, iframe, token);
      
      console.log(`OffscreenDocument: Authentication setup complete for ${provider}`);
    } catch (error) {
      console.error(`OffscreenDocument: Failed to setup auth for ${provider}:`, error);
    }
  }

  /**
   * Inject provider-specific authentication
   */
  private async injectProviderAuth(provider: string, iframe: HTMLIFrameElement, token: string): Promise<void> {
    const config = IFRAME_CONFIGS[provider];
    if (!config) return;

    try {
      // Use postMessage to communicate with iframe securely
      const authMessage = {
        type: 'AUTH_INJECT',
        provider,
        token,
        timestamp: Date.now()
      };

      // Wait for iframe to be ready
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      iframe.contentWindow?.postMessage(authMessage, config.url);
    } catch (error) {
      console.error(`OffscreenDocument: Failed to inject auth for ${provider}:`, error);
    }
  }

  /**
   * Send message to service worker
   */
  public sendMessage<T extends TextEventType>(
    type: T,
    payload: TextEventPayload<T>
  ): void {
    const message = createBusMessage(type, payload);
    this.channel.postMessage(message);
  }

  /**
   * Extract token from provider iframe
   */
  public async extractToken(provider: string): Promise<string | null> {
    const iframe = this.iframes.get(provider);
    if (!iframe) {
      console.warn(`OffscreenDocument: No iframe found for ${provider}`);
      return null;
    }

    try {
      // Request token extraction from iframe
      const extractMessage = {
        type: 'TOKEN_EXTRACT',
        provider,
        timestamp: Date.now()
      };

      const config = IFRAME_CONFIGS[provider];
      iframe.contentWindow?.postMessage(extractMessage, config.url);

      // Wait for token response (simplified - in production would use proper promise/callback)
      return new Promise((resolve) => {
        const handler = (event: MessageEvent) => {
          if (event.data?.type === 'TOKEN_RESPONSE' && event.data?.provider === provider) {
            window.removeEventListener('message', handler);
            resolve(event.data.token || null);
          }
        };
        
        window.addEventListener('message', handler);
        
        // Timeout after 5 seconds
        setTimeout(() => {
          window.removeEventListener('message', handler);
          resolve(null);
        }, 5000);
      });
    } catch (error) {
      console.error(`OffscreenDocument: Failed to extract token for ${provider}:`, error);
      return null;
    }
  }

  /**
   * Update cached token for provider
   */
  public updateToken(provider: string, token: string): void {
    this.tokenCache.set(provider, token);
    stateManager.setToken(provider, token);
    
    // Update iframe auth if it exists
    const iframe = this.iframes.get(provider);
    if (iframe) {
      this.setupIframeAuth(provider, iframe);
    }
  }

  /**
   * Clean up request resources
   */
  private cleanupRequest(requestId: string): void {
    // Remove any stored blob URLs for this request
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.includes(requestId)) {
        localStorage.removeItem(key);
      }
    });
  }

  /**
   * Get iframe for provider
   */
  public getIframe(provider: string): HTMLIFrameElement | undefined {
    return this.iframes.get(provider);
  }

  /**
   * Check if document is ready
   */
  public get isReady(): boolean {
    return this.isInitialized && this.iframes.size > 0;
  }

  /**
   * Destroy offscreen document
   */
  public async destroy(): Promise<void> {
    try {
      // Clean up iframes
      for (const iframe of this.iframes.values()) {
        iframe.remove();
      }
      this.iframes.clear();

      // Close broadcast channel
      this.channel.close();

      // Clear token cache
      this.tokenCache.clear();

      this.isInitialized = false;
      console.log('OffscreenDocument: Destroyed');
    } catch (error) {
      console.error('OffscreenDocument: Error during destroy', error);
    }
  }
}

// Export singleton access
export const offscreenDocument = OffscreenDocument.getInstance();


================================================
FILE: src/net/NetRules.ts
================================================
/**
 * DAY 3 - NET RULES
 * Synchronous init that registers CSP-stripping & auth-header rules for text endpoints only
 */

// Provider endpoints for text-only communication
export const TEXT_ENDPOINTS = {
  CHATGPT: 'https://chat.openai.com/backend-api/*',
  CLAUDE: 'https://claude.ai/api/*',
  GEMINI: 'https://gemini.google.com/_/BardChatUi/*'
} as const;

// Rule IDs for declarativeNetRequest
export const RULE_IDS = {
  CSP_STRIP_CHATGPT: 10001,
  CSP_STRIP_CLAUDE: 10002,
  CSP_STRIP_GEMINI: 10003,
  AUTH_HEADER_CHATGPT: 10004,
  AUTH_HEADER_CLAUDE: 10005,
  AUTH_HEADER_GEMINI: 10006
} as const;

export interface NetRuleConfig {
  enableCSPStripping: boolean;
  enableAuthHeaders: boolean;
  providers: ('chatgpt' | 'claude' | 'gemini')[];
}

export class NetRules {
  private static instance: NetRules;
  private isInitialized = false;
  private activeRuleIds: number[] = [];

  private constructor() {}

  public static getInstance(): NetRules {
    if (!NetRules.instance) {
      NetRules.instance = new NetRules();
    }
    return NetRules.instance;
  }

  /**
   * Synchronous initialization - registers rules immediately
   */
  public async init(config: NetRuleConfig = this.getDefaultConfig()): Promise<void> {
    if (this.isInitialized) {
      console.warn('NetRules: Already initialized');
      return;
    }

    try {
      // Clear any existing rules first
      await this.clearRules();

      // Register new rules based on config
      const rulesToAdd: chrome.declarativeNetRequest.Rule[] = [];

      if (config.enableCSPStripping) {
        rulesToAdd.push(...this.createCSPStripRules(config.providers));
      }

      if (config.enableAuthHeaders) {
        rulesToAdd.push(...this.createAuthHeaderRules(config.providers));
      }

      if (rulesToAdd.length > 0) {
        await chrome.declarativeNetRequest.updateDynamicRules({
          addRules: rulesToAdd
        });
        
        this.activeRuleIds = rulesToAdd.map(rule => rule.id);
        console.log(`NetRules: Registered ${rulesToAdd.length} rules for providers:`, config.providers);
      }

      this.isInitialized = true;
    } catch (error) {
      console.error('NetRules: Failed to initialize', error);
      throw error;
    }
  }

  /**
   * Create CSP-stripping rules for text endpoints
   */
  private createCSPStripRules(providers: string[]): chrome.declarativeNetRequest.Rule[] {
    const rules: chrome.declarativeNetRequest.Rule[] = [];

    providers.forEach(provider => {
      switch (provider) {
        case 'chatgpt':
          rules.push({
            id: RULE_IDS.CSP_STRIP_CHATGPT,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              responseHeaders: [
                {
                  header: 'content-security-policy',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                },
                {
                  header: 'content-security-policy-report-only',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.CHATGPT,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;

        case 'claude':
          rules.push({
            id: RULE_IDS.CSP_STRIP_CLAUDE,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              responseHeaders: [
                {
                  header: 'content-security-policy',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                },
                {
                  header: 'content-security-policy-report-only',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.CLAUDE,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;

        case 'gemini':
          rules.push({
            id: RULE_IDS.CSP_STRIP_GEMINI,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              responseHeaders: [
                {
                  header: 'content-security-policy',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                },
                {
                  header: 'content-security-policy-report-only',
                  operation: chrome.declarativeNetRequest.HeaderOperation.REMOVE
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.GEMINI,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;
      }
    });

    return rules;
  }

  /**
   * Create auth header injection rules for text endpoints
   */
  private createAuthHeaderRules(providers: string[]): chrome.declarativeNetRequest.Rule[] {
    const rules: chrome.declarativeNetRequest.Rule[] = [];

    providers.forEach(provider => {
      switch (provider) {
        case 'chatgpt':
          rules.push({
            id: RULE_IDS.AUTH_HEADER_CHATGPT,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              requestHeaders: [
                {
                  header: 'authorization',
                  operation: chrome.declarativeNetRequest.HeaderOperation.SET,
                  value: 'Bearer {{HTOS_CHATGPT_TOKEN}}'
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.CHATGPT,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;

        case 'claude':
          rules.push({
            id: RULE_IDS.AUTH_HEADER_CLAUDE,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              requestHeaders: [
                {
                  header: 'cookie',
                  operation: chrome.declarativeNetRequest.HeaderOperation.SET,
                  value: 'sessionKey={{HTOS_CLAUDE_TOKEN}}'
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.CLAUDE,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;

        case 'gemini':
          rules.push({
            id: RULE_IDS.AUTH_HEADER_GEMINI,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              requestHeaders: [
                {
                  header: 'cookie',
                  operation: chrome.declarativeNetRequest.HeaderOperation.SET,
                  value: '__Secure-1PSID={{HTOS_GEMINI_TOKEN}}'
                }
              ]
            },
            condition: {
              urlFilter: TEXT_ENDPOINTS.GEMINI,
              resourceTypes: [chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST]
            }
          });
          break;
      }
    });

    return rules;
  }

  /**
   * Clear all dynamic rules
   */
  public async clearRules(): Promise<void> {
    try {
      const existingRules = await chrome.declarativeNetRequest.getDynamicRules();
      const ruleIds = existingRules.map(rule => rule.id);
      
      if (ruleIds.length > 0) {
        await chrome.declarativeNetRequest.updateDynamicRules({
          removeRuleIds: ruleIds
        });
        console.log(`NetRules: Cleared ${ruleIds.length} existing rules`);
      }
      
      this.activeRuleIds = [];
    } catch (error) {
      console.error('NetRules: Failed to clear rules', error);
      throw error;
    }
  }

  /**
   * Get current active rules
   */
  public async getActiveRules(): Promise<chrome.declarativeNetRequest.Rule[]> {
    try {
      return await chrome.declarativeNetRequest.getDynamicRules();
    } catch (error) {
      console.error('NetRules: Failed to get active rules', error);
      return [];
    }
  }

  /**
   * Update token placeholders in auth header rules
   */
  public async updateTokens(tokens: Record<string, string>): Promise<void> {
    try {
      const activeRules = await this.getActiveRules();
      const updatedRules: chrome.declarativeNetRequest.Rule[] = [];

      activeRules.forEach(rule => {
        if (rule.action.type === chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS) {
          const modifyAction = rule.action as chrome.declarativeNetRequest.ModifyHeaderInfo;
          const requestHeaders = modifyAction.requestHeaders;
          
          if (requestHeaders) {
            const updatedHeaders = requestHeaders.map(header => {
              let value = header.value || '';
              
              // Replace token placeholders
              Object.entries(tokens).forEach(([provider, token]) => {
                const placeholder = `{{HTOS_${provider.toUpperCase()}_TOKEN}}`;
                value = value.replace(placeholder, token);
              });
              
              return { ...header, value };
            });

            updatedRules.push({
              ...rule,
              action: {
                ...rule.action,
                requestHeaders: updatedHeaders
              }
            });
          }
        }
      });

      if (updatedRules.length > 0) {
        await chrome.declarativeNetRequest.updateDynamicRules({
          removeRuleIds: activeRules.map(rule => rule.id),
          addRules: updatedRules
        });
        console.log(`NetRules: Updated ${updatedRules.length} rules with new tokens`);
      }
    } catch (error) {
      console.error('NetRules: Failed to update tokens', error);
      throw error;
    }
  }

  /**
   * Default configuration
   */
  private getDefaultConfig(): NetRuleConfig {
    return {
      enableCSPStripping: true,
      enableAuthHeaders: true,
      providers: ['chatgpt', 'claude', 'gemini']
    };
  }

  /**
   * Check if NetRules is initialized
   */
  public get initialized(): boolean {
    return this.isInitialized;
  }

  /**
   * Get active rule IDs
   */
  public get ruleIds(): number[] {
    return [...this.activeRuleIds];
  }
}

// Export singleton instance
export const netRules = NetRules.getInstance();


================================================
FILE: src/providers/ProviderRegistry.ts
================================================
/**
 * DAY 4 - PROVIDER ADAPTERS
 * Factory returning adapters: openai, claude, gemini
 * Each adapter exports one function: ask(prompt: string, stream: boolean): AsyncIterable<string>
 */

import { stateManager } from './StateManager';
import { netRules } from './NetRules';

// Provider adapter interface
export interface ProviderAdapter {
  ask(prompt: string, stream: boolean): AsyncIterable<string>;
  name: string;
  endpoint: string;
}

// Provider configuration
interface ProviderConfig {
  name: string;
  endpoint: string;
  headers: Record<string, string>;
  authTokenKey: string;
}

// Provider configurations for text-only endpoints
const PROVIDER_CONFIGS: Record<string, ProviderConfig> = {
  openai: {
    name: 'OpenAI ChatGPT',
    endpoint: 'https://chat.openai.com/backend-api/conversation',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'text/event-stream'
    },
    authTokenKey: 'chatgpt'
  },
  claude: {
    name: 'Anthropic Claude', 
    endpoint: 'https://claude.ai/api/organizations/*/chat_conversations/*/completion',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'text/event-stream'
    },
    authTokenKey: 'claude'
  },
  gemini: {
    name: 'Google Gemini',
    endpoint: 'https://gemini.google.com/_/BardChatUi/data/assistant.lamda.BardFrontendService/StreamGenerate',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Accept': 'text/plain'
    },
    authTokenKey: 'gemini'
  }
};

// Base adapter implementation
abstract class BaseAdapter implements ProviderAdapter {
  protected config: ProviderConfig;

  constructor(config: ProviderConfig) {
    this.config = config;
  }

  get name(): string {
    return this.config.name;
  }

  get endpoint(): string {
    return this.config.endpoint;
  }

  abstract ask(prompt: string, stream: boolean): AsyncIterable<string>;

  protected async makeRequest(url: string, options: RequestInit): Promise<Response> {
    // Get auth token from state manager
    const token = stateManager.getToken(this.config.authTokenKey);
    if (!token) {
      throw new Error(`No auth token found for ${this.config.name}`);
    }

    // Merge headers with auth
    const headers = {
      ...this.config.headers,
      ...options.headers
    };

    // Add provider-specific auth
    if (this.config.authTokenKey === 'chatgpt') {
      headers['Authorization'] = `Bearer ${token}`;
    } else if (this.config.authTokenKey === 'claude') {
      headers['Cookie'] = `sessionKey=${token}`;
    } else if (this.config.authTokenKey === 'gemini') {
      headers['Cookie'] = `__Secure-1PSID=${token}`;
    }

    return fetch(url, {
      ...options,
      headers
    });
  }

  protected async* parseStreamResponse(response: Response): AsyncIterable<string> {
    if (!response.body) {
      throw new Error('No response body');
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let buffer = '';

    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split('\n');
        buffer = lines.pop() || '';

        for (const line of lines) {
          const trimmed = line.trim();
          if (trimmed && !trimmed.startsWith('data: [DONE]')) {
            const chunk = this.parseChunk(trimmed);
            if (chunk) {
              yield chunk;
            }
          }
        }
      }

      // Process remaining buffer
      if (buffer.trim()) {
        const chunk = this.parseChunk(buffer.trim());
        if (chunk) {
          yield chunk;
        }
      }
    } finally {
      reader.releaseLock();
    }
  }

  protected abstract parseChunk(line: string): string | null;
}

// OpenAI ChatGPT Adapter
class OpenAIAdapter extends BaseAdapter {
  async* ask(prompt: string, stream: boolean): AsyncIterable<string> {
    const payload = {
      action: 'next',
      messages: [{
        id: crypto.randomUUID(),
        author: { role: 'user' },
        content: { content_type: 'text', parts: [prompt] }
      }],
      model: 'text-davinci-002-render-sha',
      stream
    };

    const response = await this.makeRequest(this.endpoint, {
      method: 'POST',
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`OpenAI request failed: ${response.status} ${response.statusText}`);
    }

    if (stream) {
      yield* this.parseStreamResponse(response);
    } else {
      const data = await response.json();
      yield data.message?.content?.parts?.[0] || '';
    }
  }

  protected parseChunk(line: string): string | null {
    if (line.startsWith('data: ')) {
      try {
        const data = JSON.parse(line.slice(6));
        return data.message?.content?.parts?.[0] || null;
      } catch {
        return null;
      }
    }
    return null;
  }
}

// Claude Adapter
class ClaudeAdapter extends BaseAdapter {
  async* ask(prompt: string, stream: boolean): AsyncIterable<string> {
    const payload = {
      prompt,
      model: 'claude-3-sonnet-20240229',
      max_tokens: 4096,
      stream
    };

    const response = await this.makeRequest(this.endpoint, {
      method: 'POST',
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`Claude request failed: ${response.status} ${response.statusText}`);
    }

    if (stream) {
      yield* this.parseStreamResponse(response);
    } else {
      const data = await response.json();
      yield data.completion || '';
    }
  }

  protected parseChunk(line: string): string | null {
    if (line.startsWith('data: ')) {
      try {
        const data = JSON.parse(line.slice(6));
        return data.completion || null;
      } catch {
        return null;
      }
    }
    return null;
  }
}

// Gemini Adapter
class GeminiAdapter extends BaseAdapter {
  async* ask(prompt: string, stream: boolean): AsyncIterable<string> {
    const payload = new URLSearchParams({
      'f.req': JSON.stringify([[prompt]]),
      'at': stateManager.getToken('gemini') || ''
    });

    const response = await this.makeRequest(this.endpoint, {
      method: 'POST',
      body: payload.toString()
    });

    if (!response.ok) {
      throw new Error(`Gemini request failed: ${response.status} ${response.statusText}`);
    }

    if (stream) {
      yield* this.parseStreamResponse(response);
    } else {
      const text = await response.text();
      const match = text.match(/"([^"]*)/);
      yield match?.[1] || '';
    }
  }

  protected parseChunk(line: string): string | null {
    try {
      // Gemini returns JSON-like responses
      const match = line.match(/"([^"]*)/);
      return match?.[1] || null;
    } catch {
      return null;
    }
  }
}

// Provider Registry
export class ProviderRegistry {
  private static adapters: Map<string, ProviderAdapter> = new Map();

  static {
    // Initialize adapters
    this.adapters.set('openai', new OpenAIAdapter(PROVIDER_CONFIGS.openai));
    this.adapters.set('claude', new ClaudeAdapter(PROVIDER_CONFIGS.claude));
    this.adapters.set('gemini', new GeminiAdapter(PROVIDER_CONFIGS.gemini));
  }

  /**
   * Get provider adapter by name
   */
  static getAdapter(provider: string): ProviderAdapter | undefined {
    return this.adapters.get(provider);
  }

  /**
   * Get all available provider names
   */
  static getProviderNames(): string[] {
    return Array.from(this.adapters.keys());
  }

  /**
   * Ask a provider with prompt
   */
  static async* ask(provider: string, prompt: string, stream = true): AsyncIterable<string> {
    const adapter = this.getAdapter(provider);
    if (!adapter) {
      throw new Error(`Unknown provider: ${provider}`);
    }

    yield* adapter.ask(prompt, stream);
  }

  /**
   * Check if provider is available (has auth token)
   */
  static isProviderAvailable(provider: string): boolean {
    const adapter = this.getAdapter(provider);
    if (!adapter) return false;

    const config = PROVIDER_CONFIGS[provider];
    return !!stateManager.getToken(config.authTokenKey);
  }

  /**
   * Get provider configuration
   */
  static getProviderConfig(provider: string): ProviderConfig | undefined {
    return PROVIDER_CONFIGS[provider];
  }
}

// Export singleton instance methods
export const providerRegistry = {
  getAdapter: ProviderRegistry.getAdapter.bind(ProviderRegistry),
  getProviderNames: ProviderRegistry.getProviderNames.bind(ProviderRegistry),
  ask: ProviderRegistry.ask.bind(ProviderRegistry),
  isProviderAvailable: ProviderRegistry.isProviderAvailable.bind(ProviderRegistry),
  getProviderConfig: ProviderRegistry.getProviderConfig.bind(ProviderRegistry)
};


================================================
FILE: src/state/state-recovery.ts
================================================
/**
 * DAY 10 - STATE RECOVERY
 * SW restart â†’ re-hydrate StateManager from chrome.storage
 * Ensure no lost messages during restart
 */

import { stateManager, StateSlices, Chat } from './StateManager';
import { swBus } from './sw';
import { netRules } from './NetRules';
import { errorHandler } from './error-handling';
import { BusMessage } from './events';

// Recovery state tracking
interface RecoveryState {
  lastRestartTime: number;
  restartCount: number;
  pendingMessages: BusMessage[];
  activeRequests: string[];
  recoveryInProgress: boolean;
}

// Recovery configuration
export const RECOVERY_CONFIG = {
  MAX_PENDING_MESSAGES: 100,
  RECOVERY_TIMEOUT_MS: 10000,
  HEALTH_CHECK_INTERVAL_MS: 5000,
  MAX_RESTART_COUNT: 10,
  RESTART_WINDOW_MS: 300000 // 5 minutes
} as const;

// State recovery manager
export class StateRecovery {
  private static instance: StateRecovery;
  private recoveryState: RecoveryState;
  private healthCheckInterval?: number;
  private messageQueue: BusMessage[] = [];
  private isRecovering = false;

  private constructor() {
    this.recoveryState = {
      lastRestartTime: 0,
      restartCount: 0,
      pendingMessages: [],
      activeRequests: [],
      recoveryInProgress: false
    };

    this.setupRecoveryHandlers();
  }

  public static getInstance(): StateRecovery {
    if (!StateRecovery.instance) {
      StateRecovery.instance = new StateRecovery();
    }
    return StateRecovery.instance;
  }

  /**
   * Initialize state recovery system
   */
  public async init(): Promise<void> {
    console.log('StateRecovery: Initializing...');

    try {
      // Load previous recovery state
      await this.loadRecoveryState();

      // Check if this is a restart
      const isRestart = await this.detectServiceWorkerRestart();

      if (isRestart) {
        console.log('StateRecovery: Service worker restart detected');
        await this.performRecovery();
      }

      // Start health monitoring
      this.startHealthMonitoring();

      console.log('StateRecovery: Initialized successfully');
    } catch (error) {
      console.error('StateRecovery: Failed to initialize', error);
      throw error;
    }
  }

  /**
   * Detect if service worker has restarted
   */
  private async detectServiceWorkerRestart(): Promise<boolean> {
    try {
      // Check if previous session data exists but current session is empty
      const sessionData = await chrome.storage.session.get(['htos_recovery_state']);
      const localData = await chrome.storage.local.get(['htos_last_shutdown_time']);

      const hasSessionData = Object.keys(sessionData).length > 0;
      const hasLocalData = Object.keys(localData).length > 0;
      const currentTime = Date.now();

      // If we have local data but no session data, it's likely a restart
      if (hasLocalData && !hasSessionData) {
        const lastShutdown = localData.htos_last_shutdown_time || 0;
        const timeSinceShutdown = currentTime - lastShutdown;

        // If shutdown was recent (< 1 minute), consider it a restart
        return timeSinceShutdown < 60000;
      }

      return false;
    } catch (error) {
      console.error('StateRecovery: Error detecting restart', error);
      return false;
    }
  }

  /**
   * Perform complete state recovery
   */
  public async performRecovery(): Promise<void> {
    if (this.isRecovering) {
      console.warn('StateRecovery: Recovery already in progress');
      return;
    }

    this.isRecovering = true;
    this.recoveryState.recoveryInProgress = true;

    const startTime = Date.now();
    console.log('StateRecovery: Starting recovery process...');

    try {
      // Step 1: Recover StateManager data
      await this.recoverStateManager();

      // Step 2: Recover network rules
      await this.recoverNetworkRules();

      // Step 3: Recover active requests
      await this.recoverActiveRequests();

      // Step 4: Replay pending messages
      await this.replayPendingMessages();

      // Step 5: Restore service worker bus
      await this.recoverServiceWorkerBus();

      // Update recovery statistics
      this.updateRecoveryStats();

      const duration = Date.now() - startTime;
      console.log(`StateRecovery: Recovery completed in ${duration}ms`);

    } catch (error) {
      console.error('StateRecovery: Recovery failed', error);
      throw error;
    } finally {
      this.isRecovering = false;
      this.recoveryState.recoveryInProgress = false;
      await this.saveRecoveryState();
    }
  }

  /**
   * Recover StateManager from storage
   */
  private async recoverStateManager(): Promise<void> {
    console.log('StateRecovery: Recovering state manager...');

    try {
      // Force re-hydration from storage
      await stateManager.hydrate();

      // Verify state integrity
      const state = stateManager.getState();
      const chatsCount = state.chats.size;
      const tokensCount = state.tokens.size;
      const cursorsCount = state.cursors.size;

      console.log(`StateRecovery: Recovered ${chatsCount} chats, ${tokensCount} tokens, ${cursorsCount} cursors`);

      // Validate recovered data
      await this.validateRecoveredState(state);

    } catch (error) {
      console.error('StateRecovery: Failed to recover state manager', error);
      throw error;
    }
  }

  /**
   * Validate recovered state data
   */
  private async validateRecoveredState(state: StateSlices): Promise<void> {
    console.log('StateRecovery: Validating recovered state...');

    // Check for corrupted chats
    for (const [chatId, chat] of state.chats) {
      if (!chat.id || !chat.provider || !Array.isArray(chat.messages)) {
        console.warn(`StateRecovery: Corrupted chat found: ${chatId}`);
        stateManager.deleteChat(chatId);
      }
    }

    // Validate tokens format
    for (const [provider, token] of state.tokens) {
      if (!token || typeof token !== 'string') {
        console.warn(`StateRecovery: Invalid token for provider: ${provider}`);
        stateManager.deleteToken(provider);
      }
    }

    console.log('StateRecovery: State validation completed');
  }

  /**
   * Recover network rules
   */
  private async recoverNetworkRules(): Promise<void> {
    console.log('StateRecovery: Recovering network rules...');

    try {
      // Reinitialize network rules
      await netRules.init();

      // Update tokens in rules
      const state = stateManager.getState();
      const tokenMap: Record<string, string> = {};
      
      for (const [provider, token] of state.tokens) {
        tokenMap[provider] = token;
      }

      if (Object.keys(tokenMap).length > 0) {
        await netRules.updateTokens(tokenMap);
      }

      console.log('StateRecovery: Network rules recovered');
    } catch (error) {
      console.error('StateRecovery: Failed to recover network rules', error);
      throw error;
    }
  }

  /**
   * Recover active requests from before restart
   */
  private async recoverActiveRequests(): Promise<void> {
    console.log('StateRecovery: Recovering active requests...');

    try {
      // Load active requests from storage
      const data = await chrome.storage.session.get(['htos_active_requests']);
      const activeRequests = data.htos_active_requests || [];

      this.recoveryState.activeRequests = activeRequests;

      // Mark old requests as failed due to restart
      for (const requestId of activeRequests) {
        console.log(`StateRecovery: Marking request as failed due to restart: ${requestId}`);
        // Could notify clients that request failed due to restart
      }

      console.log(`StateRecovery: Recovered ${activeRequests.length} active requests`);
    } catch (error) {
      console.error('StateRecovery: Failed to recover active requests', error);
    }
  }

  /**
   * Replay pending messages that weren't processed before restart
   */
  private async replayPendingMessages(): Promise<void> {
    console.log('StateRecovery: Replaying pending messages...');

    try {
      // Load pending messages from storage
      const data = await chrome.storage.local.get(['htos_pending_messages']);
      const pendingMessages = data.htos_pending_messages || [];

      this.recoveryState.pendingMessages = pendingMessages;

      if (pendingMessages.length > 0) {
        console.log(`StateRecovery: Found ${pendingMessages.length} pending messages`);

        // Replay messages through the bus
        for (const message of pendingMessages) {
          try {
            await this.replayMessage(message);
          } catch (error) {
            console.error('StateRecovery: Failed to replay message', message, error);
          }
        }

        // Clear pending messages after replay
        await chrome.storage.local.remove(['htos_pending_messages']);
      }

    } catch (error) {
      console.error('StateRecovery: Failed to replay pending messages', error);
    }
  }

  /**
   * Replay a single message
   */
  private async replayMessage(message: BusMessage): Promise<void> {
    console.log(`StateRecovery: Replaying message: ${message.type} (${message.id})`);

    // Add to message queue for processing
    this.messageQueue.push(message);

    // Process queue if service worker bus is ready
    if (swBus.isHealthy) {
      await this.processMessageQueue();
    }
  }

  /**
   * Process queued messages
   */
  private async processMessageQueue(): Promise<void> {
    while (this.messageQueue.length > 0) {
      const message = this.messageQueue.shift();
      if (message) {
        // Broadcast message through the bus
        swBus.broadcast(message.type as any, message.payload);
      }
    }
  }

  /**
   * Recover service worker bus
   */
  private async recoverServiceWorkerBus(): Promise<void> {
    console.log('StateRecovery: Recovering service worker bus...');

    try {
      // Initialize service worker bus
      await swBus.init();

      // Process any queued messages
      await this.processMessageQueue();

      console.log('StateRecovery: Service worker bus recovered');
    } catch (error) {
      console.error('StateRecovery: Failed to recover service worker bus', error);
      throw error;
    }
  }

  /**
   * Save pending message before potential restart
   */
  public async savePendingMessage(message: BusMessage): Promise<void> {
    try {
      const data = await chrome.storage.local.get(['htos_pending_messages']);
      const pendingMessages = data.htos_pending_messages || [];

      pendingMessages.push(message);

      // Limit queue size
      if (pendingMessages.length > RECOVERY_CONFIG.MAX_PENDING_MESSAGES) {
        pendingMessages.shift();
      }

      await chrome.storage.local.set({ htos_pending_messages: pendingMessages });
    } catch (error) {
      console.error('StateRecovery: Failed to save pending message', error);
    }
  }

  /**
   * Track active request
   */
  public async trackActiveRequest(requestId: string): Promise<void> {
    try {
      const data = await chrome.storage.session.get(['htos_active_requests']);
      const activeRequests = data.htos_active_requests || [];

      activeRequests.push(requestId);
      await chrome.storage.session.set({ htos_active_requests: activeRequests });
    } catch (error) {
      console.error('StateRecovery: Failed to track active request', error);
    }
  }

  /**
   * Remove completed request
   */
  public async removeActiveRequest(requestId: string): Promise<void> {
    try {
      const data = await chrome.storage.session.get(['htos_active_requests']);
      const activeRequests = data.htos_active_requests || [];

      const filtered = activeRequests.filter((id: string) => id !== requestId);
      await chrome.storage.session.set({ htos_active_requests: filtered });
    } catch (error) {
      console.error('StateRecovery: Failed to remove active request', error);
    }
  }

  /**
   * Setup recovery event handlers
   */
  private setupRecoveryHandlers(): void {
    // Listen for service worker shutdown
    if (typeof chrome !== 'undefined' && chrome.runtime) {
      chrome.runtime.onSuspend.addListener(() => {
        this.onServiceWorkerShutdown();
      });
    }
  }

  /**
   * Handle service worker shutdown
   */
  private async onServiceWorkerShutdown(): Promise<void> {
    console.log('StateRecovery: Service worker shutting down');

    try {
      // Save shutdown timestamp
      await chrome.storage.local.set({
        htos_last_shutdown_time: Date.now()
      });

      // Save current recovery state
      await this.saveRecoveryState();

    } catch (error) {
      console.error('StateRecovery: Error during shutdown', error);
    }
  }

  /**
   * Start health monitoring
   */
  private startHealthMonitoring(): void {
    this.healthCheckInterval = setInterval(() => {
      this.performHealthCheck();
    }, RECOVERY_CONFIG.HEALTH_CHECK_INTERVAL_MS) as any;
  }

  /**
   * Perform health check
   */
  private async performHealthCheck(): Promise<void> {
    try {
      // Check if state manager is healthy
      const stateHealthy = stateManager.getState() !== null;
      
      // Check if service worker bus is healthy
      const busHealthy = swBus.isHealthy;
      
      // Check if network rules are active
      const rulesHealthy = netRules.initialized;

      if (!stateHealthy || !busHealthy || !rulesHealthy) {
        console.warn('StateRecovery: Health check failed, initiating recovery');
        await this.performRecovery();
      }
    } catch (error) {
      console.error('StateRecovery: Health check error', error);
    }
  }

  /**
   * Load recovery state from storage
   */
  private async loadRecoveryState(): Promise<void> {
    try {
      const data = await chrome.storage.local.get(['htos_recovery_state']);
      if (data.htos_recovery_state) {
        this.recoveryState = { ...this.recoveryState, ...data.htos_recovery_state };
      }
    } catch (error) {
      console.error('StateRecovery: Failed to load recovery state', error);
    }
  }

  /**
   * Save recovery state to storage
   */
  private async saveRecoveryState(): Promise<void> {
    try {
      await chrome.storage.local.set({
        htos_recovery_state: this.recoveryState
      });
    } catch (error) {
      console.error('StateRecovery: Failed to save recovery state', error);
    }
  }

  /**
   * Update recovery statistics
   */
  private updateRecoveryStats(): void {
    const currentTime = Date.now();
    
    // Reset restart count if outside the window
    if (currentTime - this.recoveryState.lastRestartTime > RECOVERY_CONFIG.RESTART_WINDOW_MS) {
      this.recoveryState.restartCount = 0;
    }

    this.recoveryState.lastRestartTime = currentTime;
    this.recoveryState.restartCount++;

    console.log(`StateRecovery: Restart count: ${this.recoveryState.restartCount}`);
  }

  /**
   * Get recovery statistics
   */
  public getRecoveryStats(): {
    lastRestartTime: number;
    restartCount: number;
    pendingMessages: number;
    activeRequests: number;
    isRecovering: boolean;
  } {
    return {
      lastRestartTime: this.recoveryState.lastRestartTime,
      restartCount: this.recoveryState.restartCount,
      pendingMessages: this.recoveryState.pendingMessages.length,
      activeRequests: this.recoveryState.activeRequests.length,
      isRecovering: this.isRecovering
    };
  }

  /**
   * Stop health monitoring
   */
  public destroy(): void {
    if (this.healthCheckInterval) {
      clearInterval(this.healthCheckInterval);
      this.healthCheckInterval = undefined;
    }
  }
}

// Export singleton instance
export const stateRecovery = StateRecovery.getInstance();


================================================
FILE: src/state/StateManager.ts
================================================
/**
 * DAY 2 - STATE SKELETON
 * MobX store with three slices + Chrome storage persistence
 */

// Type definitions for the state slices
export interface Chat {
  id: string;
  provider: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
}

export interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface StateSlices {
  chats: Map<string, Chat>;
  tokens: Map<string, string>;  // opaque blobs
  cursors: Map<string, string>; // provider page cursors
}

export class StateManager {
  // Three core slices
  public chats: Map<string, Chat> = new Map();
  public tokens: Map<string, string> = new Map();
  public cursors: Map<string, string> = new Map();

  // Storage keys
  private static readonly STORAGE_KEYS = {
    CHATS_SESSION: 'htos_chats_session',
    CHATS_PERSISTENT: 'htos_chats_persistent', 
    TOKENS_SESSION: 'htos_tokens_session',
    TOKENS_PERSISTENT: 'htos_tokens_persistent',
    CURSORS_SESSION: 'htos_cursors_session',
    CURSORS_PERSISTENT: 'htos_cursors_persistent'
  };

  constructor() {
    this.initialize();
  }

  /**
   * Initialize state manager - hydrate from storage
   */
  private async initialize(): Promise<void> {
    await this.hydrate();
  }

  /**
   * Hydrate state from Chrome storage (session + local)
   */
  public async hydrate(): Promise<void> {
    try {
      // Load from session storage (volatile)
      const sessionData = await chrome.storage.session.get([
        StateManager.STORAGE_KEYS.CHATS_SESSION,
        StateManager.STORAGE_KEYS.TOKENS_SESSION,
        StateManager.STORAGE_KEYS.CURSORS_SESSION
      ]);

      // Load from local storage (persistent)
      const localData = await chrome.storage.local.get([
        StateManager.STORAGE_KEYS.CHATS_PERSISTENT,
        StateManager.STORAGE_KEYS.TOKENS_PERSISTENT,
        StateManager.STORAGE_KEYS.CURSORS_PERSISTENT
      ]);

      // Hydrate chats (prefer session, fallback to local)
      const chatsData = sessionData[StateManager.STORAGE_KEYS.CHATS_SESSION] || 
                       localData[StateManager.STORAGE_KEYS.CHATS_PERSISTENT] || 
                       [];
      this.chats = new Map(chatsData.map((chat: Chat) => [chat.id, chat]));

      // Hydrate tokens (session only - sensitive data)
      const tokensData = sessionData[StateManager.STORAGE_KEYS.TOKENS_SESSION] || [];
      this.tokens = new Map(tokensData);

      // Hydrate cursors (prefer session, fallback to local)
      const cursorsData = sessionData[StateManager.STORAGE_KEYS.CURSORS_SESSION] || 
                         localData[StateManager.STORAGE_KEYS.CURSORS_PERSISTENT] || 
                         [];
      this.cursors = new Map(cursorsData);

    } catch (error) {
      console.error('StateManager: Failed to hydrate state', error);
    }
  }

  /**
   * Persist state to Chrome storage
   */
  public async persist(): Promise<void> {
    try {
      // Convert Maps to arrays for storage
      const chatsArray = Array.from(this.chats.entries());
      const tokensArray = Array.from(this.tokens.entries());
      const cursorsArray = Array.from(this.cursors.entries());

      // Save to session storage (volatile)
      await chrome.storage.session.set({
        [StateManager.STORAGE_KEYS.CHATS_SESSION]: chatsArray,
        [StateManager.STORAGE_KEYS.TOKENS_SESSION]: tokensArray,
        [StateManager.STORAGE_KEYS.CURSORS_SESSION]: cursorsArray
      });

      // Save to local storage (persistent) - exclude sensitive tokens
      await chrome.storage.local.set({
        [StateManager.STORAGE_KEYS.CHATS_PERSISTENT]: chatsArray,
        [StateManager.STORAGE_KEYS.CURSORS_PERSISTENT]: cursorsArray
      });

    } catch (error) {
      console.error('StateManager: Failed to persist state', error);
    }
  }

  /**
   * Chat operations
   */
  public addChat(chat: Chat): void {
    this.chats.set(chat.id, chat);
    this.persist(); // Auto-persist on mutation
  }

  public getChat(id: string): Chat | undefined {
    return this.chats.get(id);
  }

  public deleteChat(id: string): boolean {
    const deleted = this.chats.delete(id);
    if (deleted) this.persist();
    return deleted;
  }

  public updateChat(id: string, updates: Partial<Chat>): void {
    const chat = this.chats.get(id);
    if (chat) {
      const updatedChat = { ...chat, ...updates, updatedAt: new Date() };
      this.chats.set(id, updatedChat);
      this.persist();
    }
  }

  /**
   * Token operations (opaque blobs)
   */
  public setToken(provider: string, token: string): void {
    this.tokens.set(provider, token);
    this.persist();
  }

  public getToken(provider: string): string | undefined {
    return this.tokens.get(provider);
  }

  public deleteToken(provider: string): boolean {
    const deleted = this.tokens.delete(provider);
    if (deleted) this.persist();
    return deleted;
  }

  /**
   * Cursor operations (provider page cursors)
   */
  public setCursor(provider: string, cursor: string): void {
    this.cursors.set(provider, cursor);
    this.persist();
  }

  public getCursor(provider: string): string | undefined {
    return this.cursors.get(provider);
  }

  public deleteCursor(provider: string): boolean {
    const deleted = this.cursors.delete(provider);
    if (deleted) this.persist();
    return deleted;
  }

  /**
   * Utility methods
   */
  public clear(): void {
    this.chats.clear();
    this.tokens.clear();
    this.cursors.clear();
    this.persist();
  }

  public getState(): StateSlices {
    return {
      chats: new Map(this.chats),
      tokens: new Map(this.tokens),
      cursors: new Map(this.cursors)
    };
  }
}

// Export singleton instance
export const stateManager = new StateManager();


================================================
FILE: src/utils/utils.ts
================================================
/**
 * DAY 1 - UTILS MINIMAL
 * Only essential utilities for text-first refactor
 */

export function cloneDeep<T>(obj: T): T {
  if (obj === null || typeof obj !== 'object') return obj;
  if (obj instanceof Date) return new Date(obj.getTime()) as T;
  if (obj instanceof Array) return obj.map(item => cloneDeep(item)) as T;
  if (typeof obj === 'object') {
    const cloned = {} as T;
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        cloned[key] = cloneDeep(obj[key]);
      }
    }
    return cloned;
  }
  return obj;
}

export function deepEqual(a: any, b: any): boolean {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (typeof a !== typeof b) return false;
  
  if (typeof a === 'object') {
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;
    
    for (const key of keysA) {
      if (!keysB.includes(key)) return false;
      if (!deepEqual(a[key], b[key])) return false;
    }
    return true;
  }
  
  return false;
}

export function get(obj: any, path: string | string[], defaultValue?: any): any {
  const keys = Array.isArray(path) ? path : path.split('.');
  let result = obj;
  
  for (const key of keys) {
    if (result == null || typeof result !== 'object') {
      return defaultValue;
    }
    result = result[key];
  }
  
  return result === undefined ? defaultValue : result;
}

export function set(obj: any, path: string | string[], value: any): any {
  const keys = Array.isArray(path) ? path : path.split('.');
  let current = obj;
  
  for (let i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (!(key in current) || typeof current[key] !== 'object') {
      current[key] = {};
    }
    current = current[key];
  }
  
  current[keys[keys.length - 1]] = value;
  return obj;
}

export function truncate(str: string, maxLength: number, suffix = '...'): string {
  if (str.length <= maxLength) return str;
  return str.slice(0, maxLength - suffix.length) + suffix;
}

export function escapeRegExp(str: string): string {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

